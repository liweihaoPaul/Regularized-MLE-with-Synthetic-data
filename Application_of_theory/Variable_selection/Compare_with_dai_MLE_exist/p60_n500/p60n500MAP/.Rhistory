X = mvrnorm(n, mu = rep(0, p), Sigma = Sigma)
1 / sqrt(diag(solve(t(X) %*% X))) / sqrt(n) / sqrt(1 - p/n)
1 / sqrt(diag(solve(t(X) %*% X/n)))
Y=X[,1]
D=X[,-1]
lm(Y~D+0)
summary(lm(Y~D+0))
ssss=summary(lm(Y~D+0))
ssss$r.squared
ssss$coefficients
ssss$residuals
sum(ssss$residuals^2)/441
ssss
sqrt(sum(ssss$residuals^2)/441)
1 / sqrt(diag(solve(t(X) %*% X/n)))
1 / sqrt(diag(solve(t(X) %*% X))) / sqrt(n) / sqrt(1 - p/n)
qqqq=1 / sqrt(diag(solve(t(X) %*% X))) / sqrt(n) / sqrt(1 - p/n)
aaaa=1 / sqrt(diag(solve(t(X) %*% X/n)))
aaaa
qqqq/aaaa
ABHqMAP <- function(X, y,X.syn,y.syn){
n = dim(X)[1]; p = dim(X)[2]
M=dim(X.syn)[1]
tau_0=p/n
fit_cat_tau_0=glmnet(rbind(X,X.syn),c(y,y.syn),weights =c(rep(1,n),rep(tau_0*n/M,M)) ,
family = "binomial",alpha=0,lambda = 0,intercept = FALSE,standardize = FALSE)
betahat_tau0=as.numeric(fit_cat_tau_0$beta)
var_xbetahat_estimation_result=estimate_eta_square_cpp(X,y,X.syn,y.syn,tau_0,betahat_tau0)
load("correspondence_eta_kappa1_non_infor_syn_data_tau_0_0.12_delta_8.33333333333333.RData")
load("TheorySolution_non_infor_syn_data_tau_0_0.12_delta_8.33333333333333.RData")
# load("correspondence_eta_kappa1_non_infor_syn_data_tau_0_0.03_delta_8.33333333333333.RData")
# load("TheorySolution_non_infor_syn_data_tau_0_0.03_delta_8.33333333333333.RData")
closed_index=which.min(abs(var_xbetahat_estimation_result-correspondence_eta_kappa1$eta_square ))
sigma_gamma_alpha=TheorySolution[closed_index,]
# v_square_seq=1/diag(solve(Sigma)) # equal to crossprod(sqrt(n)*X)/n
#
# test_statistics=betahat_tau0*sqrt(p/n)/(sigma_gamma_alpha[1]/sqrt(v_square_seq))
v_seq=1 / sqrt(diag(solve(t(X) %*% X))) / sqrt(n) / sqrt(1 - p/n)# equal to crossprod(sqrt(n)*X)/n
test_statistics=betahat_tau0*sqrt(p/n)/(sigma_gamma_alpha[1]/v_seq)
#test_statistics=betahat_tau0*sqrt(p/n)/(sigma_gamma_alpha[1])
pvalues=2*pnorm(-abs(test_statistics))
# fit <- glm(y ~ X - 1, family = 'binomial', x = TRUE, y = TRUE)
# adjusted_fit <- adjust_glm(fit, verbose = FALSE, echo = TRUE)
# pvalues <- summary(adjusted_fit)$coefficients[,4]
sorted_pvalues = sort(pvalues, decreasing = F, index.return = T)
if(sum(sorted_pvalues$x <= (1:p)*q/p) > 0){
BHq_index = max(which(sorted_pvalues$x <= (1:p)*q/p))
select_index = sorted_pvalues$ix[1:BHq_index]
num_select <- length(select_index)
return(list(select_index = select_index, num_select = num_select))
}else{
return(list(select_index = NULL, num_select = 0))
}
}
p = 60
n = 500
s = 30
q = 0.1
M=20*p
delta=n/p
rho=0.4
Sigma = matrix(0, nrow = p, ncol = p)
for(i in 1:p){
for(j in 1:p){
Sigma[i,j] = rho^abs(i-j)
}
}
for(signal_strengthscalr in c(4.5)){
repeat_function<-function(rep_i){
set.seed(rep_i)
X = mvrnorm(n, mu = rep(0, p), Sigma = Sigma)*1/sqrt(n)
signal_index = sample(1:p, size = s, replace = F)
beta = numeric(p)
beta[signal_index] = sample(c(-1, 1), s, replace = T)*signal_strengthscalr
mu = X %*% beta
y = rbinom(n, size = 1, prob = f(mu))
# generate synthetic data
#sigma_hat=crossprod(X)/n
X.syn = mvrnorm(M, mu = rep(0, p), Sigma = Sigma)/sqrt(n)
y.syn = rbinom(M, 1, rep(0.5,M))
MDS_time = system.time(MDS_result <- MDSMAP(X, y, num_split = 50))[3]
MDS_result <- fdp_power(MDS_result$select_index, signal_index)
MDS_fdp <- MDS_result$fdp
MDS_power <- MDS_result$power
ABHq_time = system.time(ABHq_result <- ABHqMAP(X, y,X.syn,y.syn))[3]
ABHq_result <- fdp_power(ABHq_result$select_index, signal_index)
ABHq_fdp <- ABHq_result$fdp
ABHq_power <- ABHq_result$power
### save data
data_save <- list(#DS_fdp   = DS_fdp,   DS_power = DS_power, DS_time = DS_time,
repindex = rep_i, rho = rho, p = p, n = n, s = s, q = q,
MDS_fdp  = MDS_fdp,  MDS_power = MDS_power, MDS_time = MDS_time,
ABHq_fdp = ABHq_fdp, ABHq_power = ABHq_power, ABHq_time = ABHq_time)
return(data_save)
}
data_save_list=mclapply(1:50, repeat_function, mc.cores = num_cores)
save(data_save_list, file = paste0('rho4nonMAPvary_signal_',signal_strengthscalr,'.RData'))
}
##################
# MAP: MAP:use Sigma to generate X.syn and RSS/(n-p+1) as conditional variance
load(paste0('rho4nonMAPvary_signal_', signal_strengthscalr, '.RData'))
result_matrix=matrix(unlist(data_save_list),nc=12,byrow = T)
fdr_col_index=c(7,10 )
power_col_index=c(8,11 )
print(signal_strengthscalr)
print( apply(result_matrix[,fdr_col_index],2,mean))
print( apply(result_matrix[,power_col_index],2,mean))
result_matrix
ABHqMAP <- function(X, y,X.syn,y.syn){
n = dim(X)[1]; p = dim(X)[2]
M=dim(X.syn)[1]
tau_0=p/n
fit_cat_tau_0=glmnet(rbind(X,X.syn),c(y,y.syn),weights =c(rep(1,n),rep(tau_0*n/M,M)) ,
family = "binomial",alpha=0,lambda = 0,intercept = FALSE,standardize = FALSE)
betahat_tau0=as.numeric(fit_cat_tau_0$beta)
var_xbetahat_estimation_result=estimate_eta_square_cpp(X,y,X.syn,y.syn,tau_0,betahat_tau0)
load("correspondence_eta_kappa1_non_infor_syn_data_tau_0_0.12_delta_8.33333333333333.RData")
load("TheorySolution_non_infor_syn_data_tau_0_0.12_delta_8.33333333333333.RData")
# load("correspondence_eta_kappa1_non_infor_syn_data_tau_0_0.03_delta_8.33333333333333.RData")
# load("TheorySolution_non_infor_syn_data_tau_0_0.03_delta_8.33333333333333.RData")
closed_index=which.min(abs(var_xbetahat_estimation_result-correspondence_eta_kappa1$eta_square ))
sigma_gamma_alpha=TheorySolution[closed_index,]
# v_square_seq=1/diag(solve(Sigma)) # equal to crossprod(sqrt(n)*X)/n
#
# test_statistics=betahat_tau0*sqrt(p/n)/(sigma_gamma_alpha[1]/sqrt(v_square_seq))
v_seq=1 / sqrt(diag(solve(t(X) %*% X)))  / sqrt(1 - p/n)
test_statistics=betahat_tau0*sqrt(p/n)/(sigma_gamma_alpha[1]/v_seq)
#test_statistics=betahat_tau0*sqrt(p/n)/(sigma_gamma_alpha[1])
pvalues=2*pnorm(-abs(test_statistics))
# fit <- glm(y ~ X - 1, family = 'binomial', x = TRUE, y = TRUE)
# adjusted_fit <- adjust_glm(fit, verbose = FALSE, echo = TRUE)
# pvalues <- summary(adjusted_fit)$coefficients[,4]
sorted_pvalues = sort(pvalues, decreasing = F, index.return = T)
if(sum(sorted_pvalues$x <= (1:p)*q/p) > 0){
BHq_index = max(which(sorted_pvalues$x <= (1:p)*q/p))
select_index = sorted_pvalues$ix[1:BHq_index]
num_select <- length(select_index)
return(list(select_index = select_index, num_select = num_select))
}else{
return(list(select_index = NULL, num_select = 0))
}
}
for(signal_strengthscalr in c(4.5)){
repeat_function<-function(rep_i){
set.seed(rep_i)
X = mvrnorm(n, mu = rep(0, p), Sigma = Sigma)*1/sqrt(n)
signal_index = sample(1:p, size = s, replace = F)
beta = numeric(p)
beta[signal_index] = sample(c(-1, 1), s, replace = T)*signal_strengthscalr
mu = X %*% beta
y = rbinom(n, size = 1, prob = f(mu))
# generate synthetic data
#sigma_hat=crossprod(X)/n
X.syn = mvrnorm(M, mu = rep(0, p), Sigma = Sigma)/sqrt(n)
y.syn = rbinom(M, 1, rep(0.5,M))
MDS_time = system.time(MDS_result <- MDSMAP(X, y, num_split = 50))[3]
MDS_result <- fdp_power(MDS_result$select_index, signal_index)
MDS_fdp <- MDS_result$fdp
MDS_power <- MDS_result$power
ABHq_time = system.time(ABHq_result <- ABHqMAP(X, y,X.syn,y.syn))[3]
ABHq_result <- fdp_power(ABHq_result$select_index, signal_index)
ABHq_fdp <- ABHq_result$fdp
ABHq_power <- ABHq_result$power
### save data
data_save <- list(#DS_fdp   = DS_fdp,   DS_power = DS_power, DS_time = DS_time,
repindex = rep_i, rho = rho, p = p, n = n, s = s, q = q,
MDS_fdp  = MDS_fdp,  MDS_power = MDS_power, MDS_time = MDS_time,
ABHq_fdp = ABHq_fdp, ABHq_power = ABHq_power, ABHq_time = ABHq_time)
return(data_save)
}
data_save_list=mclapply(1:50, repeat_function, mc.cores = num_cores)
save(data_save_list, file = paste0('rho4nonMAPvary_signal_',signal_strengthscalr,'.RData'))
}
##################
# MAP: MAP:use Sigma to generate X.syn and RSS/(n-p+1) as conditional variance
load(paste0('rho4nonMAPvary_signal_', signal_strengthscalr, '.RData'))
result_matrix=matrix(unlist(data_save_list),nc=12,byrow = T)
fdr_col_index=c(7,10 )
power_col_index=c(8,11 )
print(signal_strengthscalr)
print( apply(result_matrix[,fdr_col_index],2,mean))
print( apply(result_matrix[,power_col_index],2,mean))
##################
# MLE: original
load(paste0('rho4vary_signal_', signal_strengthscalr, '.RData'))
result_matrix = matrix(unlist(data_save_list), nc = 18, byrow = T)
fdr_col_index = c(7, 10, 13, 16)
power_col_index = c(8, 11, 14, 17)
print(signal_strengthscalr)
print(apply(result_matrix[, fdr_col_index], 2, mean))
print(apply(result_matrix[, power_col_index], 2, mean))
for(signal_strengthscalr in c(4.5)){
repeat_function<-function(rep_i){
set.seed(rep_i)
X = mvrnorm(n, mu = rep(0, p), Sigma = Sigma)*1/sqrt(n)
signal_index = sample(1:p, size = s, replace = F)
beta = numeric(p)
beta[signal_index] = sample(c(-1, 1), s, replace = T)*signal_strengthscalr
mu = X %*% beta
y = rbinom(n, size = 1, prob = f(mu))
# generate synthetic data
sigma_hat=crossprod(X)/n
X.syn = mvrnorm(M, mu = rep(0, p), Sigma = sigma_hat)
y.syn = rbinom(M, 1, rep(0.5,M))
MDS_time = system.time(MDS_result <- MDSMAP(X, y, num_split = 50))[3]
MDS_result <- fdp_power(MDS_result$select_index, signal_index)
MDS_fdp <- MDS_result$fdp
MDS_power <- MDS_result$power
ABHq_time = system.time(ABHq_result <- ABHqMAP(X, y,X.syn,y.syn))[3]
ABHq_result <- fdp_power(ABHq_result$select_index, signal_index)
ABHq_fdp <- ABHq_result$fdp
ABHq_power <- ABHq_result$power
### save data
data_save <- list(#DS_fdp   = DS_fdp,   DS_power = DS_power, DS_time = DS_time,
repindex = rep_i, rho = rho, p = p, n = n, s = s, q = q,
MDS_fdp  = MDS_fdp,  MDS_power = MDS_power, MDS_time = MDS_time,
ABHq_fdp = ABHq_fdp, ABHq_power = ABHq_power, ABHq_time = ABHq_time)
return(data_save)
}
data_save_list=mclapply(1:50, repeat_function, mc.cores = num_cores)
save(data_save_list, file = paste0('rho4nonbothMAPvary_signal_',signal_strengthscalr,'.RData'))
}
# summary
# MAP:use Sigma to generate X.syn and inverse(Sigma) as conditional variance
signal_strengthscalr=4.5
load(paste0('rho4MAPvary_signal_',signal_strengthscalr,'.RData'))
result_matrix=matrix(unlist(data_save_list),nc=12,byrow = T)
fdr_col_index=c(7,10 )
power_col_index=c(8,11 )
print(signal_strengthscalr)
print( apply(result_matrix[,fdr_col_index],2,mean))
print( apply(result_matrix[,power_col_index],2,mean))
##################
# MLE: original
load(paste0('rho4vary_signal_', signal_strengthscalr, '.RData'))
# summary
# MAP:use Sigma to generate X.syn and inverse(Sigma) as conditional variance
signal_strengthscalr=4.5
load(paste0('rho4MAPvary_signal_',signal_strengthscalr,'.RData'))
result_matrix=matrix(unlist(data_save_list),nc=12,byrow = T)
fdr_col_index=c(7,10 )
power_col_index=c(8,11 )
print(signal_strengthscalr)
print( apply(result_matrix[,fdr_col_index],2,mean))
print( apply(result_matrix[,power_col_index],2,mean))
##################
# MLE: original
load(paste0('rho4vary_signal_', signal_strengthscalr, '.RData'))
result_matrix = matrix(unlist(data_save_list), nc = 18, byrow = T)
fdr_col_index = c(7, 10, 13, 16)
power_col_index = c(8, 11, 14, 17)
print(signal_strengthscalr)
print(apply(result_matrix[, fdr_col_index], 2, mean))
print(apply(result_matrix[, power_col_index], 2, mean))
##################
# MAP: MAP:use Sigma to generate X.syn and RSS/(n-p+1) as conditional variance
load(paste0('rho4nonMAPvary_signal_', signal_strengthscalr, '.RData'))
result_matrix=matrix(unlist(data_save_list),nc=12,byrow = T)
fdr_col_index=c(7,10 )
power_col_index=c(8,11 )
print(signal_strengthscalr)
print( apply(result_matrix[,fdr_col_index],2,mean))
print( apply(result_matrix[,power_col_index],2,mean))
##################
# MAP: MAP:use sigma_hat to generate X.syn and RSS/(n-p+1) as conditional variance
load(paste0('rho4nonbothMAPvary_signal_', signal_strengthscalr, '.RData'))
result_matrix=matrix(unlist(data_save_list),nc=12,byrow = T)
fdr_col_index=c(7,10 )
power_col_index=c(8,11 )
print(signal_strengthscalr)
print( apply(result_matrix[,fdr_col_index],2,mean))
print( apply(result_matrix[,power_col_index],2,mean))
# summary
# MAP:use Sigma to generate X.syn and inverse(Sigma) as conditional variance
signal_strengthscalr=4.5
load(paste0('rho4MAPvary_signal_',signal_strengthscalr,'.RData'))
result_matrix=matrix(unlist(data_save_list),nc=12,byrow = T)
fdr_col_index=c(7,10 )
power_col_index=c(8,11 )
print(signal_strengthscalr)
print( apply(result_matrix[,fdr_col_index],2,mean))
print( apply(result_matrix[,power_col_index],2,mean))
##################
# MLE: original
load(paste0('rho4vary_signal_', signal_strengthscalr, '.RData'))
result_matrix = matrix(unlist(data_save_list), nc = 18, byrow = T)
fdr_col_index = c(7, 10, 13, 16)
power_col_index = c(8, 11, 14, 17)
print(signal_strengthscalr)
print(apply(result_matrix[, fdr_col_index], 2, mean))
print(apply(result_matrix[, power_col_index], 2, mean))
##################
# MAP: MAP:use Sigma to generate X.syn and RSS/(n-p+1) as conditional variance
load(paste0('rho4nonMAPvary_signal_', signal_strengthscalr, '.RData'))
result_matrix=matrix(unlist(data_save_list),nc=12,byrow = T)
fdr_col_index=c(7,10 )
power_col_index=c(8,11 )
print(signal_strengthscalr)
print( apply(result_matrix[,fdr_col_index],2,mean))
print( apply(result_matrix[,power_col_index],2,mean))
##################
# MAP: MAP:use sigma_hat to generate X.syn and RSS/(n-p+1) as conditional variance
load(paste0('rho4nonbothMAPvary_signal_', signal_strengthscalr, '.RData'))
result_matrix=matrix(unlist(data_save_list),nc=12,byrow = T)
fdr_col_index=c(7,10 )
power_col_index=c(8,11 )
print(signal_strengthscalr)
print( apply(result_matrix[,fdr_col_index],2,mean))
print( apply(result_matrix[,power_col_index],2,mean))
rm(list = ls())
library(MASS)
library(glmnet)
library(parallel)
num_cores <- detectCores()
library(Rcpp)
library(RcppEigen)
sourceCpp("estimate_eta_square_Eigencpp.cpp")
### source code
source("ABHqMAP.R")
source("DSMAP.R")
source("MDSMAP.R")
source("utilsMAP.R")
f <- function(x){
exp(x)/(1 + exp(x))
}
p = 60
n = 500
s = 30
q = 0.1
M=20*p
delta=n/p
rho=0.4
Sigma = matrix(0, nrow = p, ncol = p)
for(i in 1:p){
for(j in 1:p){
Sigma[i,j] = rho^abs(i-j)
}
}
for(signal_strengthscalr in c(4.5)){
repeat_function<-function(rep_i){
set.seed(rep_i)
X = mvrnorm(n, mu = rep(0, p), Sigma = Sigma)*1/sqrt(n)
signal_index = sample(1:p, size = s, replace = F)
beta = numeric(p)
beta[signal_index] = sample(c(-1, 1), s, replace = T)*signal_strengthscalr
mu = X %*% beta
y = rbinom(n, size = 1, prob = f(mu))
# generate synthetic data
sigma_hat=crossprod(X)/n
X.syn = mvrnorm(M, mu = rep(0, p), Sigma = sigma_hat)
y.syn = rbinom(M, 1, rep(0.5,M))
# MDS_time = system.time(MDS_result <- MDSMAP(X, y, num_split = 50))[3]
# MDS_result <- fdp_power(MDS_result$select_index, signal_index)
# MDS_fdp <- MDS_result$fdp
# MDS_power <- MDS_result$power
ABHq_time = system.time(ABHq_result <- ABHqMAP(X, y,X.syn,y.syn))[3]
ABHq_result <- fdp_power(ABHq_result$select_index, signal_index)
ABHq_fdp <- ABHq_result$fdp
ABHq_power <- ABHq_result$power
### save data
data_save <- list(#DS_fdp   = DS_fdp,   DS_power = DS_power, DS_time = DS_time,
repindex = rep_i, rho = rho, p = p, n = n, s = s, q = q,
#MDS_fdp  = MDS_fdp,  MDS_power = MDS_power, MDS_time = MDS_time,
ABHq_fdp = ABHq_fdp, ABHq_power = ABHq_power, ABHq_time = ABHq_time)
return(data_save)
}
data_save_list=mclapply(1:50, repeat_function, mc.cores = num_cores)
result_matrix=matrix(unlist(data_save_list),nc=12,byrow = T)
print(signal_strengthscalr)
print( apply(result_matrix[,c(7,8)],2,mean))
#save(data_save_list, file = paste0('rho4nonbothMAPvary_signal_',signal_strengthscalr,'.RData'))
}
for(signal_strengthscalr in c(4.5)){
repeat_function<-function(rep_i){
set.seed(rep_i)
X = mvrnorm(n, mu = rep(0, p), Sigma = Sigma)*1/sqrt(n)
signal_index = sample(1:p, size = s, replace = F)
beta = numeric(p)
beta[signal_index] = sample(c(-1, 1), s, replace = T)*signal_strengthscalr
mu = X %*% beta
y = rbinom(n, size = 1, prob = f(mu))
# generate synthetic data
sigma_hat=crossprod(X)/n
X.syn = mvrnorm(M, mu = rep(0, p), Sigma = sigma_hat)
y.syn = rbinom(M, 1, rep(0.5,M))
# MDS_time = system.time(MDS_result <- MDSMAP(X, y, num_split = 50))[3]
# MDS_result <- fdp_power(MDS_result$select_index, signal_index)
# MDS_fdp <- MDS_result$fdp
# MDS_power <- MDS_result$power
ABHq_time = system.time(ABHq_result <- ABHqMAP(X, y,X.syn,y.syn))[3]
ABHq_result <- fdp_power(ABHq_result$select_index, signal_index)
ABHq_fdp <- ABHq_result$fdp
ABHq_power <- ABHq_result$power
### save data
data_save <- list(#DS_fdp   = DS_fdp,   DS_power = DS_power, DS_time = DS_time,
repindex = rep_i, rho = rho, p = p, n = n, s = s, q = q,
#MDS_fdp  = MDS_fdp,  MDS_power = MDS_power, MDS_time = MDS_time,
ABHq_fdp = ABHq_fdp, ABHq_power = ABHq_power, ABHq_time = ABHq_time)
return(data_save)
}
data_save_list=mclapply(1:50, repeat_function, mc.cores = num_cores)
result_matrix=matrix(unlist(data_save_list),nc=9,byrow = T)
print(signal_strengthscalr)
print( apply(result_matrix[,c(7,8)],2,mean))
#save(data_save_list, file = paste0('rho4nonbothMAPvary_signal_',signal_strengthscalr,'.RData'))
}
# summary
# MAP:use Sigma to generate X.syn and inverse(Sigma) as conditional variance
signal_strengthscalr=4.5
load(paste0('rho4MAPvary_signal_',signal_strengthscalr,'.RData'))
result_matrix=matrix(unlist(data_save_list),nc=12,byrow = T)
fdr_col_index=c(7,10 )
power_col_index=c(8,11 )
print(signal_strengthscalr)
print( apply(result_matrix[,fdr_col_index],2,mean))
print( apply(result_matrix[,power_col_index],2,mean))
##################
# MLE: original
load(paste0('rho4vary_signal_', signal_strengthscalr, '.RData'))
result_matrix = matrix(unlist(data_save_list), nc = 18, byrow = T)
fdr_col_index = c(7, 10, 13, 16)
power_col_index = c(8, 11, 14, 17)
print(signal_strengthscalr)
print(apply(result_matrix[, fdr_col_index], 2, mean))
print(apply(result_matrix[, power_col_index], 2, mean))
##################
# MAP: MAP:use Sigma to generate X.syn and RSS/(n-p+1) as conditional variance
load(paste0('rho4nonMAPvary_signal_', signal_strengthscalr, '.RData'))
result_matrix=matrix(unlist(data_save_list),nc=12,byrow = T)
fdr_col_index=c(7,10 )
power_col_index=c(8,11 )
print(signal_strengthscalr)
print( apply(result_matrix[,fdr_col_index],2,mean))
print( apply(result_matrix[,power_col_index],2,mean))
##################
# MAP: MAP:use sigma_hat to generate X.syn and RSS/(n-p+1) as conditional variance
load(paste0('rho4nonbothMAPvary_signal_', signal_strengthscalr, '.RData'))
result_matrix=matrix(unlist(data_save_list),nc=12,byrow = T)
fdr_col_index=c(7,10 )
power_col_index=c(8,11 )
print(signal_strengthscalr)
print( apply(result_matrix[,fdr_col_index],2,mean))
print( apply(result_matrix[,power_col_index],2,mean))
ABHqMAP <- function(X, y,X.syn,y.syn){
n = dim(X)[1]; p = dim(X)[2]
M=dim(X.syn)[1]
tau_0=p/n
fit_cat_tau_0=glmnet(rbind(X,X.syn),c(y,y.syn),weights =c(rep(1,n),rep(tau_0*n/M,M)) ,
family = "binomial",alpha=0,lambda = 0,intercept = FALSE,standardize = FALSE)
betahat_tau0=as.numeric(fit_cat_tau_0$beta)
var_xbetahat_estimation_result=estimate_eta_square_cpp(X,y,X.syn,y.syn,tau_0,betahat_tau0)
load("correspondence_eta_kappa1_non_infor_syn_data_tau_0_0.12_delta_8.33333333333333.RData")
load("TheorySolution_non_infor_syn_data_tau_0_0.12_delta_8.33333333333333.RData")
# load("correspondence_eta_kappa1_non_infor_syn_data_tau_0_0.03_delta_8.33333333333333.RData")
# load("TheorySolution_non_infor_syn_data_tau_0_0.03_delta_8.33333333333333.RData")
closed_index=which.min(abs(var_xbetahat_estimation_result-correspondence_eta_kappa1$eta_square ))
sigma_gamma_alpha=TheorySolution[closed_index,]
# v_square_seq=1/diag(solve(Sigma)) # equal to crossprod(sqrt(n)*X)/n
#
# test_statistics=betahat_tau0*sqrt(p/n)/(sigma_gamma_alpha[1]/sqrt(v_square_seq))
v_seq=1 / sqrt(diag(solve(t(X) %*% X)))  / sqrt(1 - p/n)
test_statistics=betahat_tau0*sqrt(p/n)/(sigma_gamma_alpha[1]/v_seq)
#test_statistics=betahat_tau0*sqrt(p/n)/(sigma_gamma_alpha[1])
pvalues=2*pnorm(-abs(test_statistics))
# fit <- glm(y ~ X - 1, family = 'binomial', x = TRUE, y = TRUE)
# adjusted_fit <- adjust_glm(fit, verbose = FALSE, echo = TRUE)
# pvalues <- summary(adjusted_fit)$coefficients[,4]
sorted_pvalues = sort(pvalues, decreasing = F, index.return = T)
if(sum(sorted_pvalues$x <= (1:p)*q/p) > 0){
BHq_index = max(which(sorted_pvalues$x <= (1:p)*q/p))
select_index = sorted_pvalues$ix[1:BHq_index]
num_select <- length(select_index)
return(list(select_index = select_index, num_select = num_select))
}else{
return(list(select_index = NULL, num_select = 0))
}
}
for(signal_strengthscalr in c(4.5)){
repeat_function<-function(rep_i){
set.seed(rep_i)
X = mvrnorm(n, mu = rep(0, p), Sigma = Sigma)*1/sqrt(n)
signal_index = sample(1:p, size = s, replace = F)
beta = numeric(p)
beta[signal_index] = sample(c(-1, 1), s, replace = T)*signal_strengthscalr
mu = X %*% beta
y = rbinom(n, size = 1, prob = f(mu))
# generate synthetic data
sigma_hat=crossprod(X)/n
X.syn = mvrnorm(M, mu = rep(0, p), Sigma = sigma_hat)
y.syn = rbinom(M, 1, rep(0.5,M))
# MDS_time = system.time(MDS_result <- MDSMAP(X, y, num_split = 50))[3]
# MDS_result <- fdp_power(MDS_result$select_index, signal_index)
# MDS_fdp <- MDS_result$fdp
# MDS_power <- MDS_result$power
ABHq_time = system.time(ABHq_result <- ABHqMAP(X, y,X.syn,y.syn))[3]
ABHq_result <- fdp_power(ABHq_result$select_index, signal_index)
ABHq_fdp <- ABHq_result$fdp
ABHq_power <- ABHq_result$power
### save data
data_save <- list(#DS_fdp   = DS_fdp,   DS_power = DS_power, DS_time = DS_time,
repindex = rep_i, rho = rho, p = p, n = n, s = s, q = q,
#MDS_fdp  = MDS_fdp,  MDS_power = MDS_power, MDS_time = MDS_time,
ABHq_fdp = ABHq_fdp, ABHq_power = ABHq_power, ABHq_time = ABHq_time)
return(data_save)
}
data_save_list=mclapply(1:50, repeat_function, mc.cores = num_cores)
result_matrix=matrix(unlist(data_save_list),nc=9,byrow = T)
print(signal_strengthscalr)
print( apply(result_matrix[,c(7,8)],2,mean))
#save(data_save_list, file = paste0('rho4nonbothMAPvary_signal_',signal_strengthscalr,'.RData'))
}
setwd("~/Library/CloudStorage/OneDrive-NationalUniversityofSingapore/CGMT_cat/numerical_study/application_theory_procedure/scalable_free_daichengguang_compare/fig2/MAP/p60n500")
