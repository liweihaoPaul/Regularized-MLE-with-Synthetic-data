var_X=sum_X_minus_Xbar_square/(n-1)
var_X
sd_Xbar=sqrt(sum_X_minus_Xbar_square/(n-1)/n)
sd_Xbar
test_stat=(sum_X/n-197)/sqrt(sum_X_minus_Xbar_square/(n-1)/n)
if(test_stat<0){
2*(pt(test_stat,df=n-1))
}else{
2*(1-pt(test_stat,df=n-1))
}
# 6 -----------------------------------------------------------------------
b1=Sxy/sum_X_minus_Xbar_square
b1
b0=sum_Y/n-Sxy/sum_X_minus_Xbar_square*sum_X/n
b0
(b1)^2*sum_X_minus_Xbar_square/sum_Y_minus_Ybar_square
r2=(b1)^2*sum_X_minus_Xbar_square/sum_Y_minus_Ybar_square
SSR=sum_Y_minus_Ybar_square*r2
SSR=sum_Y_minus_Ybar_square*r2
SSE=sum_Y_minus_Ybar_square-SSR
SSE
SSE/(n-2)
sigmahat_square=SSE/(n-2)
# 11 ----------------------------------------------------------------------
sqrt(sigmahat_square/sum_X_minus_Xbar_square)
# 11 ----------------------------------------------------------------------
sd_b1=sqrt(sigmahat_square/sum_X_minus_Xbar_square)
(b1-0.002)/sd_b1
# 13 ----------------------------------------------------------------------
1-qt(0.99,df=n-2)
# 13 ----------------------------------------------------------------------
qt(0.99,df=n-2)
# 14 ----------------------------------------------------------------------
b0+b1*225
bbbb=rbinom(100,1,0.5)
cor(bbbb,bbbb
)
cor(bbbb,1-bbbb
)
3236/38.89
r1=10/35
r2=30/40
r1/r2
r2/r1
10/40*35/25
30/40*35/10
library(survival)
?pbc
?t.test
vvv=rnorm(5)
vvv
vvv%*%t(vvv)
vvv%*% vvv
?qr.solve
library(mvtnorm)
?rmvnorm
X=matrix(rnorm(200),nc=p)
p=50
s=4
X=matrix(rnorm(200),nc=p)
M=crossprod(X)
eigeninfo=eigen(M)
eigeninfo$values
eigeninfo$vectors[,1:$]
eigeninfo$vectors[,1:4]
true_space=eigeninfo$vectors[,1:s]
crossprod(true_space)
true_eigen=eigeninfo$values[1:s]
SIGMA=matrix(0,p,p)
SIGMA=matrix(0,p,p)
for(i in 1:s){
SIGMA=true_eigen[i]*tcrossprod(true_space[,i])+SIGMA
}
eigen(SIGMA)
eigen(SIGMA)$value
n=300
sample=rmvnorm(n,sigma = SIGMA)
sample_cov=crossprod(sample)
eigen(sample_cov)$values
true_eigen
sample=rmvnorm(n,sigma = SIGMA+diag(p))
sample_cov=crossprod(sample)
eigen(sample_cov)$values
sample_cov=crossprod(sample)/n
eigen(sample_cov)$values
library(survival)
?glmnet
# Load necessary library
library(MASS)
# Set seed for reproducibility
set.seed(123)
# Number of samples for each class
n1 <- 50
n2 <- 150
# Mean of each class
mean1 <- c(2, 3)
mean2 <- c(7, 8)
# Covariance matrix (same for both classes for simplicity)
covariance_matrix <- matrix(c(1, 0.5, 0.5, 1), nrow = 2)
# Generating samples for class 1 and class 2
samples_class1 <- mvrnorm(n1, mean1, covariance_matrix)
samples_class2 <- mvrnorm(n2, mean2, covariance_matrix)
# Creating a data frame
df_class1 <- data.frame(samples_class1, Class = 'Class1')
colnames(df_class1) <- c('Feature1', 'Feature2', 'Class')
df_class2 <- data.frame(samples_class2, Class = 'Class2')
colnames(df_class2) <- c('Feature1', 'Feature2', 'Class')
# Combining the two data frames into one
df <- rbind(df_class1, df_class2)
# Calculate means for each class
m1 <- colMeans(df_class1[,1:2])
m2 <- colMeans(df_class2[,1:2])
# Calculate the overall mean of all samples
m <- colMeans(df[,1:2])
# Calculate within-class scatter matrices
S1 <- t(as.matrix(df_class1[,1:2] - m1)) %*% as.matrix(df_class1[,1:2] - m1)
S2 <- t(as.matrix(df_class2[,1:2] - m2)) %*% as.matrix(df_class2[,1:2] - m2)
# Sum the within-class scatter matrices to get SW
SW <- S1 + S2
# Calculate between-class scatter matrix
SB <- n1 * (m1 - m) %*% t(m1 - m) + n2 * (m2 - m) %*% t(m2 - m)
# Print the matrices
print(SW)
print(SB)
SW+SB
df_class1
all_data=df[,1:2]
# for all_data create a matrix substract mean from each row
m=colMeans(all_data)
all_data=all_data-m
crossprod(all_data)
all_data
all_data=as.matrix(all_data-m)
crossprod(all_data)
colMeans(all_data)
all_data=df[,1:2]
# for all_data create a matrix substract mean from each row
m=colMeans(all_data)
all_data=as.matrix(all_data-m)
colMeans(all_data)
apply(all_data,2,mean)
all_data=df[,1:2]
# for all_data create a matrix substract mean from each row
m=apply(all_data,2,mean)
all_data=as.matrix(all_data-m)
apply(all_data,2,mean)
m
sss=matrix(1:6,3)
sss
sss-c(7,7)
sss-c(7,77)
t(sss)-c(7,77)
# Set seed for reproducibility
set.seed(123)
# Number of samples for each class
n1 <- 50
n2 <- 150
# Mean of each class
mean1 <- c(2, 3)
mean2 <- c(7, 8)
# Covariance matrix (same for both classes for simplicity)
covariance_matrix <- matrix(c(1, 0.5, 0.5, 1), nrow = 2)
# Generating samples for class 1 and class 2
samples_class1 <- mvrnorm(n1, mean1, covariance_matrix)
samples_class2 <- mvrnorm(n2, mean2, covariance_matrix)
# Creating a data frame
df_class1 <- data.frame(samples_class1, Class = 'Class1')
colnames(df_class1) <- c('Feature1', 'Feature2', 'Class')
df_class2 <- data.frame(samples_class2, Class = 'Class2')
colnames(df_class2) <- c('Feature1', 'Feature2', 'Class')
# Combining the two data frames into one
df <- rbind(df_class1, df_class2)
# Calculate means for each class
m1 <- colMeans(df_class1[,1:2])
m2 <- colMeans(df_class2[,1:2])
# Calculate the overall mean of all samples
m <- colMeans(df[,1:2])
# Calculate within-class scatter matrices
S1 <- as.matrix(t(df_class1[,1:2]) - m1)) %*% t(as.matrix(t(df_class1[,1:2]) - m1))
# Calculate within-class scatter matrices
S1 <- as.matrix(t(df_class1[,1:2]) - m1) %*% t(as.matrix(t(df_class1[,1:2]) - m1))
S2 <-  as.matrix(t(df_class2[,1:2]) - m2) %*% t(as.matrix(t(df_class2[,1:2]) - m2))
# Sum the within-class scatter matrices to get SW
SW <- S1 + S2
m1
# Calculate between-class scatter matrix
SB <- n1 * (m1 - m) %*% t(m1 - m) + n2 * (m2 - m) %*% t(m2 - m)
# Print the matrices
print(SW)
print(SB)
# for all_data create a matrix substract mean from each row
S <- as.matrix(t(all_data) - m) %*% t(as.matrix(t(all_data) - m))
crossprod(all_data)
SW+SB
sss=t(t(all_data) - m) )
sss=t(t(all_data) - m)
sss
colMeans(sss)
sss=t(df_class1[,1:2]) - m1)
sss=t(df_class1[,1:2]) - m1
sss
rowMeans(sss)
all_data=df[,1:2]
# for all_data create a matrix substract mean from each row
S <- as.matrix(t(all_data) - m) %*% t(as.matrix(t(all_data) - m))
sss=t(all_data) - m
rowMeans(sss)
crossprod(all_data)
# for all_data create a matrix substract mean from each row
S <- as.matrix(t(all_data) - m) %*% t(as.matrix(t(all_data) - m))
crossprod(all_data)
S
SW+SB
# Set seed for reproducibility
set.seed(123)
# Number of samples for each class
n1 <- 50
n2 <- 120
# Mean of each class
mean1 <- c(2, 3)
mean2 <- c(7, 8)
# Covariance matrix (same for both classes for simplicity)
covariance_matrix <- matrix(c(1, 0.5, 0.5, 1), nrow = 2)
# Generating samples for class 1 and class 2
samples_class1 <- mvrnorm(n1, mean1, covariance_matrix)
samples_class2 <- mvrnorm(n2, mean2, covariance_matrix)
# Creating a data frame
df_class1 <- data.frame(samples_class1, Class = 'Class1')
colnames(df_class1) <- c('Feature1', 'Feature2', 'Class')
df_class2 <- data.frame(samples_class2, Class = 'Class2')
colnames(df_class2) <- c('Feature1', 'Feature2', 'Class')
# Combining the two data frames into one
df <- rbind(df_class1, df_class2)
# Calculate means for each class
m1 <- colMeans(df_class1[,1:2])
m2 <- colMeans(df_class2[,1:2])
# Calculate the overall mean of all samples
m <- colMeans(df[,1:2])
# Calculate within-class scatter matrices
S1 <- as.matrix(t(df_class1[,1:2]) - m1) %*% t(as.matrix(t(df_class1[,1:2]) - m1))
S2 <-  as.matrix(t(df_class2[,1:2]) - m2) %*% t(as.matrix(t(df_class2[,1:2]) - m2))
# Sum the within-class scatter matrices to get SW
SW <- S1 + S2
# Calculate between-class scatter matrix
SB <- n1 * (m1 - m) %*% t(m1 - m) + n2 * (m2 - m) %*% t(m2 - m)
# Print the matrices
print(SW)
print(SB)
# Display the first few rows of the dataset
head(df)
all_data=df[,1:2]
# for all_data create a matrix substract mean from each row
S <- as.matrix(t(all_data) - m) %*% t(as.matrix(t(all_data) - m))
S
SW+SB
matrix(1,n,n)
n=4
matrix(1,n,n)
M=diag(n)-matrix(1,n,n)/4
M
eigen(M)
x=c(0,0,1,1)
solve(M,x)
?solve
solve(M+0.000001*diag(n),x)
solve(M+0.000000000001*diag(n),x)
I_4 <- diag(4)
one_4 <- matrix(rep(1, 4), nrow = 4)
M <- I_4 - (one_4 %*% t(one_4)) / 4
b <- c(0, 0, 1, 1)
x=c(-0.5,-0.5,0.5,0.5)
M%*%x
alpha_1=0.1
alpha_2=0.9
p=30
A1=matrix(rnorm(p*p),p,p))
A2=matrix(rnorm(p*p),p,p))
A1=matrix(rnorm(p*p),p,p)
A2=matrix(rnorm(p*p),p,p)
eigen_A1=eigen(A1)
eigen_A2=eigen(A2)
lambda_1=eigen_A1$values
lambda_2=eigen_A2$values
e1=eigen_A1$vectors
e2=eigen_A2$vectors
e1[,1]*e2[,1]
A1=crossprod( matrix(rnorm(p*p),p,p))
A2=crossprod( matrix(rnorm(p*p),p,p))
eigen_A1=eigen(A1)
eigen_A2=eigen(A2)
lambda_1=eigen_A1$values
lambda_2=eigen_A2$values
e1=eigen_A1$vectors
e2=eigen_A2$vectors
e1[,1]*e2[,1]
sum(e1[,1]*e2[,1])
lambda_1
lambda_2
m=alpha_1*A1+alpha_2*A2
eigen_m=eigen(m)
lambda_m=eigen_m$values
lambda_m
sum(e1[,1]*e_m[,1])
e_m=eigen_m$vectors
sum(e1[,1]*e_m[,1])
alpha_1=0.5
alpha_2=0.5
p=30
A1=crossprod( matrix(rnorm(p*p),p,p))
A2=crossprod( matrix(rnorm(p*p),p,p))
eigen_A1=eigen(A1)
eigen_A2=eigen(A2)
lambda_1=eigen_A1$values
lambda_2=eigen_A2$values
e1=eigen_A1$vectors
e2=eigen_A2$vectors
sum(e1[,1]*e2[,1])
lambda_1
lambda_2
m=alpha_1*A1+alpha_2*A2
eigen_m=eigen(m)
lambda_m=eigen_m$values
lambda_m
e_m=eigen_m$vectors
sum(e1[,1]*e_m[,1])
sqrt(.Machine$double.eps)
setwd("~/Desktop/OneDrive - National University of Singapore/CGMT_cat/numerical_study/case_non_infor_syn_data")
#further step to generate plot
#plot theory delta=c(2,4) in one plot total four plot because four kappa1 c(0.5,1,1.5,2)
library(latex2exp)
par(mar=c(3,6,3,3),mfrow=c(2,2))
tau_0_seq=seq(0.1,2,0.1)
one_plot_MSE_different_delta<-function(kappa1,tau_0_seq,design_type,beta_true_gen){
delta=2
load(paste0("TheorySolution_non_infor_syn_data_delta_kappa1_",kappa1,"_delta_",delta,".RData"))
TheorySolution1=TheorySolution
plot(tau_0_seq,TheorySolution1[,1]^2+kappa1^2*(TheorySolution1[,3]-1)^2,type="l",ylim=c(0,4),
col=1,xlab=expression(tau[0]),ylab=expression(frac(1, p) * group("||", hat(beta) - beta[0], "||")^2),main=paste0("kapppa1=",kappa1))
# add empirical point
m=20/delta
load(paste0("empirical_result_matrix_non_infor_syn_data_delta_",
delta,"_m_",m,"_kappa1_",
kappa1,"_design_type_",
design_type,"_beta_true_gen_",beta_true_gen,".RData"))
points(tau_0_seq,empirical_result_matrix[,1],col=1,pch=16)
delta=4
load(paste0("TheorySolution_non_infor_syn_data_delta_kappa1_",kappa1,"_delta_",delta,".RData"))
TheorySolution2=TheorySolution
lines(tau_0_seq,TheorySolution2[,1]^2+kappa1^2*(TheorySolution2[,3]-1)^2,type="l",col=2)
# add empirical point
m=20/delta
load(paste0("empirical_result_matrix_non_infor_syn_data_delta_",
delta,"_m_",m,"_kappa1_",
kappa1,"_design_type_",
design_type,"_beta_true_gen_",beta_true_gen,".RData"))
points(tau_0_seq,empirical_result_matrix[,1],col=2,pch=16)
legend("topright",c(expression(delta==2),expression(delta==4)),col=c(1,2),lty=c(1,1),pch=c(16,16))
}
one_plot_MSE_different_delta(kappa1=0.5,tau_0_seq=tau_0_seq,design_type="Gaussian",beta_true_gen="t3")
one_plot_MSE_different_delta(kappa1=1,tau_0_seq=tau_0_seq,design_type="Gaussian",beta_true_gen="t3")
one_plot_MSE_different_delta(kappa1=1.5,tau_0_seq=tau_0_seq,design_type="Gaussian",beta_true_gen="t3")
one_plot_MSE_different_delta(kappa1=2,tau_0_seq=tau_0_seq,design_type="Gaussian",beta_true_gen="t3")
one_plot_corr_different_delta<-function(kappa1,tau_0_seq,design_type,beta_true_gen){
delta=2
load(paste0("TheorySolution_non_infor_syn_data_delta_kappa1_",kappa1,"_delta_",delta,".RData"))
TheorySolution1=TheorySolution
plot(tau_0_seq,kappa1^2*TheorySolution1[,3]/(kappa1*sqrt(kappa1^2*TheorySolution1[,3]^2+TheorySolution1[,1]^2)),type="l",ylim=c(0,kappa1),
col=1,xlab=expression(tau[0]),ylab="Corr",main=paste0("kapppa1=",kappa1))
# add empirical point
m=20/delta
load(paste0("empirical_result_matrix_non_infor_syn_data_delta_",
delta,"_m_",m,"_kappa1_",
kappa1,"_design_type_",
design_type,"_beta_true_gen_",beta_true_gen,".RData"))
points(tau_0_seq,empirical_result_matrix[,3],col=1,pch=16)
delta=4
load(paste0("TheorySolution_non_infor_syn_data_delta_kappa1_",kappa1,"_delta_",delta,".RData"))
TheorySolution2=TheorySolution
lines(tau_0_seq,kappa1^2*TheorySolution2[,3]/(kappa1*sqrt(kappa1^2*TheorySolution2[,3]^2+TheorySolution2[,1]^2)),type="l",col=2)
# add empirical point
m=20/delta
load(paste0("empirical_result_matrix_non_infor_syn_data_delta_",
delta,"_m_",m,"_kappa1_",
kappa1,"_design_type_",
design_type,"_beta_true_gen_",beta_true_gen,".RData"))
points(tau_0_seq,empirical_result_matrix[,3],col=2,pch=16)
legend("topright",c(expression(delta==2),expression(delta==4)),col=c(1,2),lty=c(1,1),pch=c(16,16))
}
one_plot_corr_different_delta(kappa1=0.5,tau_0_seq=tau_0_seq,design_type="Gaussian",beta_true_gen="t3")
one_plot_corr_different_delta(kappa1=1,tau_0_seq=tau_0_seq,design_type="Gaussian",beta_true_gen="t3")
one_plot_corr_different_delta(kappa1=1.5,tau_0_seq=tau_0_seq,design_type="Gaussian",beta_true_gen="t3")
one_plot_corr_different_delta(kappa1=2,tau_0_seq=tau_0_seq,design_type="Gaussian",beta_true_gen="t3")
one_plot_corr_different_delta<-function(kappa1,tau_0_seq,design_type,beta_true_gen){
delta=2
load(paste0("TheorySolution_non_infor_syn_data_delta_kappa1_",kappa1,"_delta_",delta,".RData"))
TheorySolution1=TheorySolution
plot(tau_0_seq,kappa1^2*TheorySolution1[,3]/(kappa1*sqrt(kappa1^2*TheorySolution1[,3]^2+TheorySolution1[,1]^2)),type="l",ylim=c(0,1),
col=1,xlab=expression(tau[0]),ylab="Corr",main=paste0("kapppa1=",kappa1))
# add empirical point
m=20/delta
load(paste0("empirical_result_matrix_non_infor_syn_data_delta_",
delta,"_m_",m,"_kappa1_",
kappa1,"_design_type_",
design_type,"_beta_true_gen_",beta_true_gen,".RData"))
points(tau_0_seq,empirical_result_matrix[,3],col=1,pch=16)
delta=4
load(paste0("TheorySolution_non_infor_syn_data_delta_kappa1_",kappa1,"_delta_",delta,".RData"))
TheorySolution2=TheorySolution
lines(tau_0_seq,kappa1^2*TheorySolution2[,3]/(kappa1*sqrt(kappa1^2*TheorySolution2[,3]^2+TheorySolution2[,1]^2)),type="l",col=2)
# add empirical point
m=20/delta
load(paste0("empirical_result_matrix_non_infor_syn_data_delta_",
delta,"_m_",m,"_kappa1_",
kappa1,"_design_type_",
design_type,"_beta_true_gen_",beta_true_gen,".RData"))
points(tau_0_seq,empirical_result_matrix[,3],col=2,pch=16)
legend("topright",c(expression(delta==2),expression(delta==4)),col=c(1,2),lty=c(1,1),pch=c(16,16))
}
one_plot_corr_different_delta(kappa1=0.5,tau_0_seq=tau_0_seq,design_type="Gaussian",beta_true_gen="t3")
one_plot_corr_different_delta(kappa1=1,tau_0_seq=tau_0_seq,design_type="Gaussian",beta_true_gen="t3")
one_plot_corr_different_delta(kappa1=1.5,tau_0_seq=tau_0_seq,design_type="Gaussian",beta_true_gen="t3")
one_plot_corr_different_delta(kappa1=2,tau_0_seq=tau_0_seq,design_type="Gaussian",beta_true_gen="t3")
setwd("~/Desktop/OneDrive - National University of Singapore/CGMT_cat/numerical_study/case_infor_source_data")
# further step to generate plot delta=c(2,4)  four kappa1 c(0.5,1,1.5,2)
library(latex2exp)
par(mar=c(3,6,3,3))
tau_0_seq=seq(0.1,2,0.1)
kesee=0.9
one_plot_MSE_different_delta<-function(kappa1,tau_0_seq,kappa2,kesee=0.9,design_type,beta_true_gen){
delta=2
load(paste0("TheorySolution_infor_source_data_delta_kappa1_",
kappa1,"_kappa2_",kappa2,"_delta_",delta,"_kesee_",kesee,".RData"))
TheorySolution1=TheorySolution
plot(tau_0_seq,TheorySolution1[,1]^2+kappa1^2*(TheorySolution1[,3]-1)^2+kappa2^2*TheorySolution1[,4]^2,type="l",ylim=c(0,4),
col=1,xlab=expression(tau[0]),ylab=expression(frac(1, p) * group("||", hat(beta) - beta[0], "||")^2),main=paste0("kapppa1=",kappa1))
# add empirical point
m=20/delta
load(paste0("empirical_result_matrix_infor_source_data_delta_kappa1_",
kappa1,"_kappa2_",kappa2,"_delta_",delta,"_kesee_",kesee,".RData"))
points(tau_0_seq,empirical_result_matrix[,1],col=1,pch=16)
delta=4
load(paste0("TheorySolution_infor_source_data_delta_kappa1_",
kappa1,"_kappa2_",kappa2,"_delta_",delta,"_kesee_",kesee,".RData"))
TheorySolution2=TheorySolution
lines(tau_0_seq,TheorySolution2[,1]^2+kappa1^2*(TheorySolution2[,3]-1)^2+kappa2^2*TheorySolution2[,4]^2,type="l",col=2)
# add empirical point
m=20/delta
load(paste0("empirical_result_matrix_infor_source_data_delta_kappa1_",
kappa1,"_kappa2_",kappa2,"_delta_",delta,"_kesee_",kesee,".RData"))
points(tau_0_seq,empirical_result_matrix[,1],col=2,pch=16)
legend("topright",c(expression(delta==2),expression(delta==4)),col=c(1,2),lty=c(1,1),pch=c(16,16))
}
one_plot_MSE_different_delta(kappa1=0.5,tau_0_seq,kappa2=1,kesee=0.9,design_type="Gaussian",beta_true_gen="t3")
one_plot_MSE_different_delta(kappa1=1,tau_0_seq,kappa2=1,kesee=0.9,design_type="Gaussian",beta_true_gen="t3")
one_plot_MSE_different_delta(kappa1=1.5,tau_0_seq,kappa2=1,kesee=0.9,design_type="Gaussian",beta_true_gen="t3")
one_plot_MSE_different_delta(kappa1=2,tau_0_seq,kappa2=1,kesee=0.9,design_type="Gaussian",beta_true_gen="t3")
one_plot_corr_different_delta<-function(kappa1,tau_0_seq,kappa2,kesee=0.9,design_type,beta_true_gen){
delta=2
load(paste0("TheorySolution_infor_source_data_delta_kappa1_",
kappa1,"_kappa2_",kappa2,"_delta_",delta,"_kesee_",kesee,".RData"))
TheorySolution1=TheorySolution
plot(tau_0_seq,kappa1^2*TheorySolution1[,3]/(kappa1*sqrt(TheorySolution1[,1]^2+kappa1^2*TheorySolution1[,3]^2+kappa2^2*TheorySolution1[,4]^2)),type="l",ylim=c(0,1),
col=1,xlab=expression(tau[0]),ylab="Corr",main=paste0("kapppa1=",kappa1))
# add empirical point
m=20/delta
load(paste0("empirical_result_matrix_infor_source_data_delta_kappa1_",
kappa1,"_kappa2_",kappa2,"_delta_",delta,"_kesee_",kesee,".RData"))
points(tau_0_seq,empirical_result_matrix[,2],col=1,pch=16)
delta=4
load(paste0("TheorySolution_infor_source_data_delta_kappa1_",
kappa1,"_kappa2_",kappa2,"_delta_",delta,"_kesee_",kesee,".RData"))
TheorySolution2=TheorySolution
lines(tau_0_seq,kappa1^2*TheorySolution2[,3]/(kappa1*sqrt(TheorySolution2[,1]^2+kappa1^2*TheorySolution2[,3]^2+kappa2^2*TheorySolution2[,4]^2)),type="l",col=2)
# add empirical point
m=20/delta
load(paste0("empirical_result_matrix_infor_source_data_delta_kappa1_",
kappa1,"_kappa2_",kappa2,"_delta_",delta,"_kesee_",kesee,".RData"))
points(tau_0_seq,empirical_result_matrix[,2],col=2,pch=16)
legend("topright",c(expression(delta==2),expression(delta==4)),col=c(1,2),lty=c(1,1),pch=c(16,16))
}
one_plot_corr_different_delta(kappa1=0.5,tau_0_seq,kappa2=1,kesee=0.9,design_type="Gaussian",beta_true_gen="t3")
one_plot_corr_different_delta(kappa1=1,tau_0_seq,kappa2=1,kesee=0.9,design_type="Gaussian",beta_true_gen="t3")
one_plot_corr_different_delta(kappa1=1.5,tau_0_seq,kappa2=1,kesee=0.9,design_type="Gaussian",beta_true_gen="t3")
one_plot_corr_different_delta(kappa1=2,tau_0_seq,kappa2=1,kesee=0.9,design_type="Gaussian",beta_true_gen="t3")
one_plot_corr_different_delta<-function(kappa1,tau_0_seq,kappa2,kesee=0.9,design_type,beta_true_gen){
delta=2
load(paste0("TheorySolution_infor_source_data_delta_kappa1_",
kappa1,"_kappa2_",kappa2,"_delta_",delta,"_kesee_",kesee,".RData"))
TheorySolution1=TheorySolution
plot(tau_0_seq,kappa1^2*TheorySolution1[,3]/(kappa1*sqrt(TheorySolution1[,1]^2+kappa1^2*TheorySolution1[,3]^2+kappa2^2*TheorySolution1[,4]^2)),type="l",ylim=c(0,1),
col=1,xlab=expression(tau[0]),ylab="Corr",main=paste0("kapppa1=",kappa1))
# add empirical point
m=20/delta
load(paste0("empirical_result_matrix_infor_source_data_delta_kappa1_",
kappa1,"_kappa2_",kappa2,"_delta_",delta,"_kesee_",kesee,".RData"))
points(tau_0_seq,empirical_result_matrix[,3],col=1,pch=16)
delta=4
load(paste0("TheorySolution_infor_source_data_delta_kappa1_",
kappa1,"_kappa2_",kappa2,"_delta_",delta,"_kesee_",kesee,".RData"))
TheorySolution2=TheorySolution
lines(tau_0_seq,kappa1^2*TheorySolution2[,3]/(kappa1*sqrt(TheorySolution2[,1]^2+kappa1^2*TheorySolution2[,3]^2+kappa2^2*TheorySolution2[,4]^2)),type="l",col=2)
# add empirical point
m=20/delta
load(paste0("empirical_result_matrix_infor_source_data_delta_kappa1_",
kappa1,"_kappa2_",kappa2,"_delta_",delta,"_kesee_",kesee,".RData"))
points(tau_0_seq,empirical_result_matrix[,3],col=2,pch=16)
legend("topright",c(expression(delta==2),expression(delta==4)),col=c(1,2),lty=c(1,1),pch=c(16,16))
}
one_plot_corr_different_delta(kappa1=0.5,tau_0_seq,kappa2=1,kesee=0.9,design_type="Gaussian",beta_true_gen="t3")
one_plot_corr_different_delta(kappa1=1,tau_0_seq,kappa2=1,kesee=0.9,design_type="Gaussian",beta_true_gen="t3")
one_plot_corr_different_delta(kappa1=1.5,tau_0_seq,kappa2=1,kesee=0.9,design_type="Gaussian",beta_true_gen="t3")
one_plot_corr_different_delta(kappa1=2,tau_0_seq,kappa2=1,kesee=0.9,design_type="Gaussian",beta_true_gen="t3")
