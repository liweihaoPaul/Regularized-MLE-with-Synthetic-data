design_type,"_beta_true_gen_",beta_true_gen,".RData"))
plot_data_set$y_mean=empirical_result_matrix[,4]
plot_data_set$delta=delta
dataset2=plot_data_set
merged_data=rbind(dataset1,dataset2)
figg=ggplot(merged_data, aes(x = x, group = delta)) +
geom_line(aes(y = theory_limit, color = as.factor(delta))) +
#geom_ribbon(aes(ymin = y_lower, ymax = y_upper, fill = as.factor(delta)), alpha = 0.2, color = NA) +
geom_point(aes(y = y_mean, color = as.factor(delta),shape= as.factor(delta)), size = 2) +
scale_color_manual(values = c("red", "blue"),
labels = c(expression(delta==2), expression(delta==4))) +
scale_shape_manual(values = c(1,2),  # Assign specific shapes for each delta
labels = c(expression(delta == 2), expression(delta == 4))) +
labs(x = expression(tau[0]), y = "Generalization Error", color = "" ) +
ylim(0.3, 0.5) +
theme(panel.background = element_blank(),  # Blank background
panel.grid.major = element_blank(),  # Remove major grid lines
panel.grid.minor = element_blank(),  # Remove minor grid lines
panel.border = element_rect(colour = "black", fill = NA) # Add the frame
,legend.position="none",plot.title = element_text(hjust = 0.5))+ggtitle(bquote(kappa[1] == .(kappa1)))
only_for_legend_plot=ggplot(merged_data, aes(x = x, group = delta)) +
geom_line(aes(y = theory_limit, color = as.factor(delta))) +
#geom_ribbon(aes(ymin = y_lower, ymax = y_upper, fill = as.factor(delta)), alpha = 0.2, color = NA) +
geom_point(aes(y = y_mean, color = as.factor(delta),shape= as.factor(delta)), size = 2) +
scale_color_manual(values = c("red", "blue"),
labels = c(expression(delta==2), expression(delta==4))) +
scale_shape_manual(values = c(1,2),  # Assign specific shapes for each delta
labels = c(expression(delta == 2), expression(delta == 4))) +
labs(x = expression(tau[0]), y = "Cosine Similarity", color =  " ",shape= " " ) +
theme(legend.position = "right",legend.text = element_text(size = 18),
legend.key.size = unit(2.5, "lines"),panel.background = element_blank())
g_legend <- ggplotGrob(only_for_legend_plot)
legend <- g_legend$grobs[[which(g_legend$layout$name == "guide-box-right")]]
return(list(fig=figg,legend=legend))
}
one_plot_classerror(kappa1=1)$fig
legend=one_plot_classerror(kappa1=1)$legend
library(gridExtra)
grid.arrange(one_plot_pred_deviance( kappa1 = 0.5)$fig, one_plot_pred_deviance( kappa1 = 1)$fig,
one_plot_classerror( kappa1 = 0.5)$fig, one_plot_classerror( kappa1 = 1)$fig, nrow = 2,ncol=2,
right=legend)
setwd("C:/Users/e0708167/OneDrive - National University of Singapore/CGMT_cat/numerical_study/deviance_and_prediction_limit/em_plot_remake")
one_plot_classerror(kappa1=1)$fig
legend=one_plot_classerror(kappa1=1)$legend
library(gridExtra)
grid.arrange(one_plot_pred_deviance( kappa1 = 0.5)$fig, one_plot_pred_deviance( kappa1 = 1)$fig,
one_plot_classerror( kappa1 = 0.5)$fig, one_plot_classerror( kappa1 = 1)$fig, nrow = 2,ncol=2,
right=legend)
setwd("C:/Users/e0708167/OneDrive - National University of Singapore/CGMT_cat/numerical_study/heavy_tail_design/em_plot_remake")
generate_one_plot<-function(design_type="t3"){
degree_f=c(2.5,3,4,5)[which(c("t25","t3","t4","t5")==design_type)]
delta=4
m=20/delta
kappa1=1
tau_0_seq=seq(0.1,2,0.1)
load(paste0("system_root_non_infor_syn_data_delta_",delta,"_m_",m,"_kappa1_",kappa1,".RData"))
beta_true_gen="t3"
load(paste0("empirical_result_matrix_non_infor_syn_data_delta_",
delta,"_m_",m,"_kappa1_",
kappa1,"_design_type_",
design_type,"_beta_true_gen_",beta_true_gen,".RData"))
plot_data_set=data.frame(x=tau_0_seq,y_mean=rep(0,length(tau_0_seq)),y_upper=rep(0,length(tau_0_seq)),
y_lower=rep(0,length(tau_0_seq)),theory_limit=rep(0,length(tau_0_seq)))
plot_data_set$theory_limit=system_root[,1]^2+(system_root[,3]-1)^2*kappa1^2
plot_data_set$y_mean=empirical_result_matrix[,1]
figg=ggplot(plot_data_set, aes(x = x, y = theory_limit)) +
geom_line(aes(y = theory_limit)) +
geom_point(aes(y = y_mean), size = 2) +
labs(x = expression(tau[0]), y = "MSE"  ) +
ylim(0.6, 2.0) +
theme(panel.background = element_blank(),  # Blank background
panel.grid.major = element_blank(),  # Remove major grid lines
panel.grid.minor = element_blank(),  # Remove minor grid lines
panel.border = element_rect(colour = "black", fill = NA) # Add the frame
,legend.position="none",plot.title = element_text(hjust = 0.5))+ggtitle(bquote(df == .(degree_f)))
return(figg)
# only_for_legend_plot=ggplot(plot_data_set, aes(x = x, y = theory_limit)) +
#   geom_line(aes(y = theory_limit)) +
#   geom_point(aes(y = y_mean), size = 2) +
#   labs(x = expression(tau[0]), y = "MSE"  ) +
#   theme(legend.position="right")
# g_legend <- ggplotGrob(only_for_legend_plot)
# legend <- g_legend$grobs[[which(g_legend$layout$name == "guide-box-right")]]
# return(list(fig=figg,legend=legend))
}
library(gridExtra)
grid.arrange(generate_one_plot("t25"),generate_one_plot("t3"),generate_one_plot("t4"),generate_one_plot("t5"), nrow = 2,ncol=2)
generate_one_plot<-function(design_type="t3"){
degree_f=c(2.5,3,4,5)[which(c("t25","t3","t4","t5")==design_type)]
delta=4
m=20/delta
kappa1=1
tau_0_seq=seq(0.1,2,0.1)
load(paste0("system_root_non_infor_syn_data_delta_",delta,"_m_",m,"_kappa1_",kappa1,".RData"))
beta_true_gen="t3"
load(paste0("empirical_result_matrix_non_infor_syn_data_delta_",
delta,"_m_",m,"_kappa1_",
kappa1,"_design_type_",
design_type,"_beta_true_gen_",beta_true_gen,".RData"))
plot_data_set=data.frame(x=tau_0_seq,y_mean=rep(0,length(tau_0_seq)),y_upper=rep(0,length(tau_0_seq)),
y_lower=rep(0,length(tau_0_seq)),theory_limit=rep(0,length(tau_0_seq)))
plot_data_set$theory_limit=system_root[,1]^2+(system_root[,3]-1)^2*kappa1^2
plot_data_set$y_mean=empirical_result_matrix[,1]
figg=ggplot(plot_data_set, aes(x = x, y = theory_limit)) +
geom_line(aes(y = theory_limit)) +
geom_point(aes(y = y_mean), size = 2) +
labs(x = expression(tau[0]), y = "Square Error"  ) +
ylim(0.6, 2.0) +
theme(panel.background = element_blank(),  # Blank background
panel.grid.major = element_blank(),  # Remove major grid lines
panel.grid.minor = element_blank(),  # Remove minor grid lines
panel.border = element_rect(colour = "black", fill = NA) # Add the frame
,legend.position="none",plot.title = element_text(hjust = 0.5))+ggtitle(bquote(df == .(degree_f)))
return(figg)
# only_for_legend_plot=ggplot(plot_data_set, aes(x = x, y = theory_limit)) +
#   geom_line(aes(y = theory_limit)) +
#   geom_point(aes(y = y_mean), size = 2) +
#   labs(x = expression(tau[0]), y = "MSE"  ) +
#   theme(legend.position="right")
# g_legend <- ggplotGrob(only_for_legend_plot)
# legend <- g_legend$grobs[[which(g_legend$layout$name == "guide-box-right")]]
# return(list(fig=figg,legend=legend))
}
library(gridExtra)
grid.arrange(generate_one_plot("t25"),generate_one_plot("t3"),generate_one_plot("t4"),generate_one_plot("t5"), nrow = 2,ncol=2)
library(glmnet)
library(parallel)
no_cores <- detectCores() - 1
delta=4
m=20/delta
kappa1=1
tau_0_seq=seq(0.1,2,0.1)
# conduct empirical simulation, write a function to return beta under different setting
generate_beta<-function(p,kappa1,beta_true_gen="normal"){
if(beta_true_gen=="normal"){
return(rnorm(p,sd=kappa1))
}
if(beta_true_gen=="uniform"){
return(runif(p,min=-1,max=1)*kappa1*sqrt(3))
}
if(beta_true_gen=="t3"){
return(rt(p,df=3)*kappa1/sqrt(3))
}
if(beta_true_gen=="halfsparse"){
ind <- sample(c(TRUE, FALSE), p, replace = TRUE)
v=rnorm(p,sd=kappa1*sqrt(2))
v[ind]=0
return(v)
}
}
generate_design_X<-function(n,p,design_type="sysBern"){
if(design_type=="sysBern"){
return(matrix(2*(rnorm(p*n)>0)-1,nc=p)/sqrt(p))
}
if(design_type=="t25"){
return(matrix(rt(p*n,df=2.5)/sqrt(p*5),nc=p))
}
if(design_type=="t4"){
return(matrix(rt(p*n,df=4)/sqrt(p*2),nc=p))
}
if(design_type=="t3"){
return(matrix(rt(p*n,df=3)/sqrt(p*3),nc=p))
}
if(design_type=="t5"){
return(matrix(rt(p*n,df=5)/sqrt(p*5/3),nc=p))
}
if(design_type=="t6"){
return(matrix(rt(p*n,df=6)/sqrt(p*1.5),nc=p))
}
}
empirical_simulation_non_infor_syn_data<-function(delta,m,kappa1,tau_0,
design_type="Gaussian",beta_true_gen="normal",p=250,NUM_REPEAT=50){
n=p*delta
M=m*n
tau=tau_0*n
# MSE_store=rep(0,NUM_REPEAT)
# bias_store=rep(0,NUM_REPEAT)
rep_function<-function(rep_i){
set.seed(rep_i)
beta_true=generate_beta(p,kappa1,beta_true_gen)
X=generate_design_X(n,p,design_type)
Xstar=generate_design_X(M,p,"Gaussian") #matrix(rnorm(p*M,mean=0,sd=sqrt(1/p)),nc=p)
prop1= 1/(1+exp(-X%*%beta_true))
y1=rbinom(n,1,prop1)
prop2= 1/(1+exp(rep(0,M)))
ystar=rbinom(M,1,prop2)
wt=c(rep(1,n),rep(tau/M,M))
fit_lambda_seq<-glmnet(rbind(X,Xstar),c(y1,ystar),weights = wt,
family = "binomial",alpha=0,lambda = 0,intercept = FALSE,standardize = FALSE)
beta_hat=as.numeric(fit_lambda_seq$beta )
return(norm(beta_hat-beta_true,type="2")^2/p)
}
result_parall<-mclapply(1:NUM_REPEAT,rep_function,mc.cores = no_cores)
# for(rep_i in 1:NUM_REPEAT){
#
#   MSE_store[rep_i]=norm(beta_hat-beta_true,type="2")^2/p
#   bias_store[rep_i]=sum(beta_hat*beta_true)/p
# }
# return average result
vv=unlist(result_parall)
return(c(mean(vv),mean(vv)+1.96*sd(vv)/sqrt(NUM_REPEAT),mean(vv)-1.96*sd(vv)/sqrt(NUM_REPEAT)))
}
for(design_type in c("t25","t3","t4","t5")){
beta_true_gen="t3"
empirical_result_matrix=matrix(0,nrow=length(tau_0_seq),ncol=3)
for(tau_0_index in 1:length(tau_0_seq)){
print(tau_0_index)
tau_0=tau_0_seq[tau_0_index]
empirical_result=empirical_simulation_non_infor_syn_data(delta,m,kappa1,tau_0,
design_type,beta_true_gen,NUM_REPEAT = 100)
empirical_result_matrix[tau_0_index,]=empirical_result
}
# save empirical_result_matrix with design and beta type
save(empirical_result_matrix,file=paste0("empirical_result_matrix_non_infor_syn_data_delta_",
delta,"_m_",m,"_kappa1_",
kappa1,"_obs_design_type_",
design_type,"_beta_true_gen_",beta_true_gen,".RData"))
}
warnings()
beta_true_gen="t3"
design_type
tau_0_index
tau_0
empirical_result=empirical_simulation_non_infor_syn_data(delta,m,kappa1,tau_0,
design_type,beta_true_gen,NUM_REPEAT = 100)
beta_true=generate_beta(p,kappa1,beta_true_gen)
delta=4
p=250
n=p*delta
M=m*n
tau=tau_0*n
beta_true=generate_beta(p,kappa1,beta_true_gen)
X=generate_design_X(n,p,design_type)
Xstar=generate_design_X(M,p,"Gaussian") #matrix(rnorm(p*M,mean=0,sd=sqrt(1/p)),nc=p)
prop1= 1/(1+exp(-X%*%beta_true))
y1=rbinom(n,1,prop1)
prop2= 1/(1+exp(rep(0,M)))
ystar=rbinom(M,1,prop2)
wt=c(rep(1,n),rep(tau/M,M))
fit_lambda_seq<-glmnet(rbind(X,Xstar),c(y1,ystar),weights = wt,
family = "binomial",alpha=0,lambda = 0,intercept = FALSE,standardize = FALSE)
fit_lambda_seq<-glmnet(rbind(X,Xstar),c(y1,ystar),weights = wt,
family = "binomial",alpha=0,lambda = 0,intercept = FALSE,standardize = FALSE)
dim(rbind(X,Xstar))
empirical_simulation_non_infor_syn_data<-function(delta,m,kappa1,tau_0,
design_type="Gaussian",beta_true_gen="normal",p=250,NUM_REPEAT=50){
n=p*delta
M=m*n
tau=tau_0*n
# MSE_store=rep(0,NUM_REPEAT)
# bias_store=rep(0,NUM_REPEAT)
rep_function<-function(rep_i){
set.seed(rep_i)
beta_true=generate_beta(p,kappa1,beta_true_gen)
X=generate_design_X(n,p,design_type)
Xstar= matrix(rnorm(p*M,mean=0,sd=sqrt(1/p)),nc=p)
prop1= 1/(1+exp(-X%*%beta_true))
y1=rbinom(n,1,prop1)
prop2= 1/(1+exp(rep(0,M)))
ystar=rbinom(M,1,prop2)
wt=c(rep(1,n),rep(tau/M,M))
fit_lambda_seq<-glmnet(rbind(X,Xstar),c(y1,ystar),weights = wt,
family = "binomial",alpha=0,lambda = 0,intercept = FALSE,standardize = FALSE)
beta_hat=as.numeric(fit_lambda_seq$beta )
return(norm(beta_hat-beta_true,type="2")^2/p)
}
result_parall<-mclapply(1:NUM_REPEAT,rep_function,mc.cores = no_cores)
# for(rep_i in 1:NUM_REPEAT){
#
#   MSE_store[rep_i]=norm(beta_hat-beta_true,type="2")^2/p
#   bias_store[rep_i]=sum(beta_hat*beta_true)/p
# }
# return average result
vv=unlist(result_parall)
return(c(mean(vv),mean(vv)+1.96*sd(vv)/sqrt(NUM_REPEAT),mean(vv)-1.96*sd(vv)/sqrt(NUM_REPEAT)))
}
for(design_type in c("t25","t3","t4","t5")){
beta_true_gen="t3"
empirical_result_matrix=matrix(0,nrow=length(tau_0_seq),ncol=3)
for(tau_0_index in 1:length(tau_0_seq)){
print(tau_0_index)
tau_0=tau_0_seq[tau_0_index]
empirical_result=empirical_simulation_non_infor_syn_data(delta,m,kappa1,tau_0,
design_type,beta_true_gen,NUM_REPEAT = 100)
empirical_result_matrix[tau_0_index,]=empirical_result
}
# save empirical_result_matrix with design and beta type
save(empirical_result_matrix,file=paste0("empirical_result_matrix_non_infor_syn_data_delta_",
delta,"_m_",m,"_kappa1_",
kappa1,"_obs_design_type_",
design_type,"_beta_true_gen_",beta_true_gen,".RData"))
}
for(design_type in c("t25","t3","t4","t5")){
beta_true_gen="t3"
empirical_result_matrix=matrix(0,nrow=length(tau_0_seq),ncol=3)
for(tau_0_index in 1:length(tau_0_seq)){
print(tau_0_index)
tau_0=tau_0_seq[tau_0_index]
empirical_result=empirical_simulation_non_infor_syn_data(delta,m,kappa1,tau_0,
design_type,beta_true_gen,NUM_REPEAT = 50)
empirical_result_matrix[tau_0_index,]=empirical_result
}
# save empirical_result_matrix with design and beta type
save(empirical_result_matrix,file=paste0("empirical_result_matrix_non_infor_syn_data_delta_",
delta,"_m_",m,"_kappa1_",
kappa1,"_obs_design_type_",
design_type,"_beta_true_gen_",beta_true_gen,".RData"))
}
generate_one_plot<-function(design_type="t3"){
degree_f=c(2.5,3,4,5)[which(c("t25","t3","t4","t5")==design_type)]
delta=4
m=20/delta
kappa1=1
tau_0_seq=seq(0.1,2,0.1)
load(paste0("system_root_non_infor_syn_data_delta_",delta,"_m_",m,"_kappa1_",kappa1,".RData"))
beta_true_gen="t3"
load(paste0("empirical_result_matrix_non_infor_syn_data_delta_",
delta,"_m_",m,"_kappa1_",
kappa1,"_obs_design_type_",
design_type,"_beta_true_gen_",beta_true_gen,".RData"))
plot_data_set=data.frame(x=tau_0_seq,y_mean=rep(0,length(tau_0_seq)),y_upper=rep(0,length(tau_0_seq)),
y_lower=rep(0,length(tau_0_seq)),theory_limit=rep(0,length(tau_0_seq)))
plot_data_set$theory_limit=system_root[,1]^2+(system_root[,3]-1)^2*kappa1^2
plot_data_set$y_mean=empirical_result_matrix[,1]
figg=ggplot(plot_data_set, aes(x = x, y = theory_limit)) +
geom_line(aes(y = theory_limit)) +
geom_point(aes(y = y_mean), size = 2) +
labs(x = expression(tau[0]), y = "Square Error"  ) +
ylim(0.6, 2.0) +
theme(panel.background = element_blank(),  # Blank background
panel.grid.major = element_blank(),  # Remove major grid lines
panel.grid.minor = element_blank(),  # Remove minor grid lines
panel.border = element_rect(colour = "black", fill = NA) # Add the frame
,legend.position="none",plot.title = element_text(hjust = 0.5))+ggtitle(bquote(df == .(degree_f)))
return(figg)
# only_for_legend_plot=ggplot(plot_data_set, aes(x = x, y = theory_limit)) +
#   geom_line(aes(y = theory_limit)) +
#   geom_point(aes(y = y_mean), size = 2) +
#   labs(x = expression(tau[0]), y = "MSE"  ) +
#   theme(legend.position="right")
# g_legend <- ggplotGrob(only_for_legend_plot)
# legend <- g_legend$grobs[[which(g_legend$layout$name == "guide-box-right")]]
# return(list(fig=figg,legend=legend))
}
generate_one_plot("t25")
library(ggplot2)
generate_one_plot("t25")
beta_true_gen="t3"
empirical_result_matrix=matrix(0,nrow=length(tau_0_seq),ncol=3)
for(tau_0_index in 1:length(tau_0_seq)){
print(tau_0_index)
tau_0=tau_0_seq[tau_0_index]
empirical_result=empirical_simulation_non_infor_syn_data(delta,m,kappa1,tau_0,
design_type,beta_true_gen,NUM_REPEAT = 50)
empirical_result_matrix[tau_0_index,]=empirical_result
}
# save empirical_result_matrix with design and beta type
save(empirical_result_matrix,file=paste0("empirical_result_matrix_non_infor_syn_data_delta_",
delta,"_m_",m,"_kappa1_",
kappa1,"_obs_design_type_",
design_type,"_beta_true_gen_",beta_true_gen,".RData"))
generate_one_plot("t3")
design_type
design_type='t4'
design_type
beta_true_gen="t3"
empirical_result_matrix=matrix(0,nrow=length(tau_0_seq),ncol=3)
for(tau_0_index in 1:length(tau_0_seq)){
print(tau_0_index)
tau_0=tau_0_seq[tau_0_index]
empirical_result=empirical_simulation_non_infor_syn_data(delta,m,kappa1,tau_0,
design_type,beta_true_gen,NUM_REPEAT = 50)
empirical_result_matrix[tau_0_index,]=empirical_result
}
# save empirical_result_matrix with design and beta type
save(empirical_result_matrix,file=paste0("empirical_result_matrix_non_infor_syn_data_delta_",
delta,"_m_",m,"_kappa1_",
kappa1,"_obs_design_type_",
design_type,"_beta_true_gen_",beta_true_gen,".RData"))
generate_one_plot("t4")
library(glmnet)
library(parallel)
no_cores <- detectCores()
delta=4
m=20/delta
kappa1=1
tau_0_seq=seq(0.1,2,0.1)
# conduct empirical simulation, write a function to return beta under different setting
generate_beta<-function(p,kappa1,beta_true_gen="normal"){
if(beta_true_gen=="normal"){
return(rnorm(p,sd=kappa1))
}
if(beta_true_gen=="uniform"){
return(runif(p,min=-1,max=1)*kappa1*sqrt(3))
}
if(beta_true_gen=="t3"){
return(rt(p,df=3)*kappa1/sqrt(3))
}
if(beta_true_gen=="halfsparse"){
ind <- sample(c(TRUE, FALSE), p, replace = TRUE)
v=rnorm(p,sd=kappa1*sqrt(2))
v[ind]=0
return(v)
}
}
generate_design_X<-function(n,p,design_type="sysBern"){
if(design_type=="sysBern"){
return(matrix(2*(rnorm(p*n)>0)-1,nc=p)/sqrt(p))
}
if(design_type=="t25"){
return(matrix(rt(p*n,df=2.5)/sqrt(p*5),nc=p))
}
if(design_type=="t4"){
return(matrix(rt(p*n,df=4)/sqrt(p*2),nc=p))
}
if(design_type=="t3"){
return(matrix(rt(p*n,df=3)/sqrt(p*3),nc=p))
}
if(design_type=="t5"){
return(matrix(rt(p*n,df=5)/sqrt(p*5/3),nc=p))
}
if(design_type=="t6"){
return(matrix(rt(p*n,df=6)/sqrt(p*1.5),nc=p))
}
}
empirical_simulation_non_infor_syn_data<-function(delta,m,kappa1,tau_0,
design_type="Gaussian",beta_true_gen="normal",p=250,NUM_REPEAT=50){
n=p*delta
M=m*n
tau=tau_0*n
# MSE_store=rep(0,NUM_REPEAT)
# bias_store=rep(0,NUM_REPEAT)
rep_function<-function(rep_i){
set.seed(rep_i)
beta_true=generate_beta(p,kappa1,beta_true_gen)
X=generate_design_X(n,p,design_type)
Xstar= matrix(rnorm(p*M,mean=0,sd=sqrt(1/p)),nc=p)
prop1= 1/(1+exp(-X%*%beta_true))
y1=rbinom(n,1,prop1)
prop2= 1/(1+exp(rep(0,M)))
ystar=rbinom(M,1,prop2)
wt=c(rep(1,n),rep(tau/M,M))
fit_lambda_seq<-glmnet(rbind(X,Xstar),c(y1,ystar),weights = wt,
family = "binomial",alpha=0,lambda = 0,intercept = FALSE,standardize = FALSE)
beta_hat=as.numeric(fit_lambda_seq$beta )
return(norm(beta_hat-beta_true,type="2")^2/p)
}
result_parall<-mclapply(1:NUM_REPEAT,rep_function,mc.cores = no_cores)
# for(rep_i in 1:NUM_REPEAT){
#
#   MSE_store[rep_i]=norm(beta_hat-beta_true,type="2")^2/p
#   bias_store[rep_i]=sum(beta_hat*beta_true)/p
# }
# return average result
vv=unlist(result_parall)
return(c(mean(vv),mean(vv)+1.96*sd(vv)/sqrt(NUM_REPEAT),mean(vv)-1.96*sd(vv)/sqrt(NUM_REPEAT)))
}
for(design_type in c("t25","t3","t4","t5")){
beta_true_gen="t3"
empirical_result_matrix=matrix(0,nrow=length(tau_0_seq),ncol=3)
for(tau_0_index in 1:length(tau_0_seq)){
print(tau_0_index)
tau_0=tau_0_seq[tau_0_index]
empirical_result=empirical_simulation_non_infor_syn_data(delta,m,kappa1,tau_0,
design_type,beta_true_gen,NUM_REPEAT = 50)
empirical_result_matrix[tau_0_index,]=empirical_result
}
# save empirical_result_matrix with design and beta type
save(empirical_result_matrix,file=paste0("empirical_result_matrix_non_infor_syn_data_delta_",
delta,"_m_",m,"_kappa1_",
kappa1,"_obs_design_type_",
design_type,"_beta_true_gen_",beta_true_gen,".RData"))
}
library(ggplot2)
generate_one_plot<-function(design_type="t3"){
degree_f=c(2.5,3,4,5)[which(c("t25","t3","t4","t5")==design_type)]
delta=4
m=20/delta
kappa1=1
tau_0_seq=seq(0.1,2,0.1)
load(paste0("system_root_non_infor_syn_data_delta_",delta,"_m_",m,"_kappa1_",kappa1,".RData"))
beta_true_gen="t3"
load(paste0("empirical_result_matrix_non_infor_syn_data_delta_",
delta,"_m_",m,"_kappa1_",
kappa1,"_obs_design_type_",
design_type,"_beta_true_gen_",beta_true_gen,".RData"))
plot_data_set=data.frame(x=tau_0_seq,y_mean=rep(0,length(tau_0_seq)),y_upper=rep(0,length(tau_0_seq)),
y_lower=rep(0,length(tau_0_seq)),theory_limit=rep(0,length(tau_0_seq)))
plot_data_set$theory_limit=system_root[,1]^2+(system_root[,3]-1)^2*kappa1^2
plot_data_set$y_mean=empirical_result_matrix[,1]
figg=ggplot(plot_data_set, aes(x = x, y = theory_limit)) +
geom_line(aes(y = theory_limit)) +
geom_point(aes(y = y_mean), size = 2) +
labs(x = expression(tau[0]), y = "Square Error"  ) +
ylim(0.6, 2.0) +
theme(panel.background = element_blank(),  # Blank background
panel.grid.major = element_blank(),  # Remove major grid lines
panel.grid.minor = element_blank(),  # Remove minor grid lines
panel.border = element_rect(colour = "black", fill = NA) # Add the frame
,legend.position="none",plot.title = element_text(hjust = 0.5))+ggtitle(bquote(df == .(degree_f)))
return(figg)
# only_for_legend_plot=ggplot(plot_data_set, aes(x = x, y = theory_limit)) +
#   geom_line(aes(y = theory_limit)) +
#   geom_point(aes(y = y_mean), size = 2) +
#   labs(x = expression(tau[0]), y = "MSE"  ) +
#   theme(legend.position="right")
# g_legend <- ggplotGrob(only_for_legend_plot)
# legend <- g_legend$grobs[[which(g_legend$layout$name == "guide-box-right")]]
# return(list(fig=figg,legend=legend))
}
library(gridExtra)
grid.arrange(generate_one_plot("t25"),generate_one_plot("t3"),generate_one_plot("t4"),generate_one_plot("t5"), nrow = 2,ncol=2)
