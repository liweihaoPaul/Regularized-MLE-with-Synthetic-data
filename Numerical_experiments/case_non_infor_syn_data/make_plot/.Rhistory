plot_data_set$delta=delta
dataset2=plot_data_set
merged_data=rbind(dataset1,dataset2)
figg=ggplot(merged_data, aes(x = x, group = delta)) +
geom_line(aes(y = theory_limit, color = as.factor(delta))) +
#geom_ribbon(aes(ymin = y_lower, ymax = y_upper, fill = as.factor(delta)), alpha = 0.2, color = NA) +
geom_point(aes(y = y_mean, color = as.factor(delta),shape= as.factor(delta)), size = 2) +
scale_color_manual(values = c("red", "blue"),
labels = c(expression(delta==2), expression(delta==4))) +
scale_shape_manual(values = c(1,2),  # Assign specific shapes for each delta
labels = c(expression(delta == 2), expression(delta == 4))) +
labs(x = expression(tau[0]), y = "Generalization Error", color = "" ) +
ylim(0.3, 0.5) +
theme(panel.background = element_blank(),  # Blank background
panel.grid.major = element_blank(),  # Remove major grid lines
panel.grid.minor = element_blank(),  # Remove minor grid lines
panel.border = element_rect(colour = "black", fill = NA) # Add the frame
,legend.position="none",plot.title = element_text(hjust = 0.5))+ggtitle(bquote(kappa[1] == .(kappa1)))
only_for_legend_plot=ggplot(merged_data, aes(x = x, group = delta)) +
geom_line(aes(y = theory_limit, color = as.factor(delta))) +
#geom_ribbon(aes(ymin = y_lower, ymax = y_upper, fill = as.factor(delta)), alpha = 0.2, color = NA) +
geom_point(aes(y = y_mean, color = as.factor(delta),shape= as.factor(delta)), size = 2) +
scale_color_manual(values = c("red", "blue"),
labels = c(expression(delta==2), expression(delta==4))) +
scale_shape_manual(values = c(1,2),  # Assign specific shapes for each delta
labels = c(expression(delta == 2), expression(delta == 4))) +
labs(x = expression(tau[0]), y = "Cosine Similarity", color =  " ",shape= " " ) +
theme(legend.position = "right",legend.text = element_text(size = 18),
legend.key.size = unit(2.5, "lines"),panel.background = element_blank())
g_legend <- ggplotGrob(only_for_legend_plot)
legend <- g_legend$grobs[[which(g_legend$layout$name == "guide-box-right")]]
return(list(fig=figg,legend=legend))
}
one_plot_classerror(kappa1=1)$fig
legend=one_plot_classerror(kappa1=1)$legend
library(gridExtra)
grid.arrange(one_plot_pred_deviance( kappa1 = 0.5)$fig, one_plot_pred_deviance( kappa1 = 1.5)$fig,
one_plot_classerror( kappa1 = 0.5)$fig, one_plot_classerror( kappa1 = 1.5)$fig, nrow = 2,ncol=2,
right=legend)
library(glmnet)
library(sigmoid)
library(parallel)
numCores <- detectCores()
generate_beta<-function(p,kappa1,beta_true_gen="normal"){
if(beta_true_gen=="normal"){
return(rnorm(p,sd=kappa1))
}
if(beta_true_gen=="uniform"){
return(runif(p,min=-1,max=1)*kappa1*sqrt(3))
}
if(beta_true_gen=="t3"){
return(rt(p,df=3)*kappa1/sqrt(3))
}
if(beta_true_gen=="halfsparse"){
ind <- sample(c(TRUE, FALSE), p, replace = TRUE)
v=rnorm(p,sd=kappa1*sqrt(2))
v[ind]=0
return(v)
}
}
generate_design_X<-function(n,p,design_type="Gaussian"){
if(design_type=="Gaussian"){
return(matrix(rnorm(p*n,mean=0,sd=sqrt(1/p)),nc=p))
}
if(design_type=="t4"){
return(matrix(rt(p*n,df=4)/sqrt(p*2),nc=p))
}
if(design_type=="t3"){
return(matrix(rt(p*n,df=3)/sqrt(p*3),nc=p))
}
}
tau_0_seq=seq(0.1,2,0.1)
for (kappa1 in c(0.5,1,1.5)){
for (delta in c(2,4)){
m=20/delta
design_type="Gaussian"
beta_true_gen="t3"
empirical_result_matrix=matrix(0,nrow=length(tau_0_seq),ncol= 6)
rep_function<-function(tau_0_index){
tau_0=tau_0_seq[tau_0_index]
empirical_result=empirical_deviance_predicterror_non_infor_syn_data(delta,m,kappa1,tau_0,
design_type,beta_true_gen)
return(empirical_result)
}
empirical_pred_list=mclapply(1:length(tau_0_seq),rep_function,mc.cores=numCores)
for(tau_0_index in 1:length(tau_0_seq)){
empirical_result=empirical_pred_list[[tau_0_index]]
empirical_result_matrix[tau_0_index,]=empirical_result
}
save(empirical_result_matrix,file=paste0("empirical_predresult_matrix_non_infor_syn_data_delta_",
delta,"_m_",m,"_kappa1_",
kappa1,"_design_type_",
design_type,"_beta_true_gen_",beta_true_gen,".RData"))
}
}
#### generate plot
library(ggplot2)
library(sigmoid)
tau_0_seq=seq(0.1,2,0.1)
one_plot_pred_deviance<-function(kappa1,tau_0_seq=seq(0.1,2,0.1),design_type="Gaussian",beta_true_gen="t3"){
delta=2
load(paste0("TheorySolution_non_infor_syn_data_delta_kappa1_",kappa1,"_delta_",delta,".RData"))
TheorySolution2=TheorySolution
Z_matrix<-matrix(rnorm(100000),ncol=2)
pred_deviance_seq_each_tau_0=rep(0,length(tau_0_seq))
for (tau_0_index in 1:length(tau_0_seq)){
tau_0=tau_0_seq[tau_0_index]
pred_deviance_seq_each_tau_0[tau_0_index]=-mean(sigmoid(kappa1*Z_matrix[,2])*log(sigmoid(abs(TheorySolution2[tau_0_index,1])*Z_matrix[,1]+TheorySolution2[tau_0_index,3]*kappa1*Z_matrix[,2]))
+(1-sigmoid(kappa1*Z_matrix[,2]))*log(1-sigmoid(abs(TheorySolution2[tau_0_index,1])*Z_matrix[,1]+TheorySolution2[tau_0_index,3]*kappa1*Z_matrix[,2])))
}
plot_data_set=data.frame(x=tau_0_seq,y_mean=rep(0,length(tau_0_seq)),y_upper=rep(0,length(tau_0_seq)),
y_lower=rep(0,length(tau_0_seq)),theory_limit=pred_deviance_seq_each_tau_0)
# add empirical point
m=20/delta
load(paste0("empirical_predresult_matrix_non_infor_syn_data_delta_",
delta,"_m_",m,"_kappa1_",
kappa1,"_design_type_",
design_type,"_beta_true_gen_",beta_true_gen,".RData"))
plot_data_set$y_mean=-empirical_result_matrix[,1]
plot_data_set$delta=delta
dataset1=plot_data_set
delta=4
load(paste0("TheorySolution_non_infor_syn_data_delta_kappa1_",kappa1,"_delta_",delta,".RData"))
TheorySolution2=TheorySolution
pred_deviance_seq_each_tau_0=rep(0,length(tau_0_seq))
for (tau_0_index in 1:length(tau_0_seq)){
tau_0=tau_0_seq[tau_0_index]
pred_deviance_seq_each_tau_0[tau_0_index]=-mean(sigmoid(kappa1*Z_matrix[,2])*log(sigmoid(abs(TheorySolution2[tau_0_index,1])*Z_matrix[,1]+TheorySolution2[tau_0_index,3]*kappa1*Z_matrix[,2]))
+(1-sigmoid(kappa1*Z_matrix[,2]))*log(1-sigmoid(abs(TheorySolution2[tau_0_index,1])*Z_matrix[,1]+TheorySolution2[tau_0_index,3]*kappa1*Z_matrix[,2])))
}
plot_data_set=data.frame(x=tau_0_seq,y_mean=rep(0,length(tau_0_seq)),y_upper=rep(0,length(tau_0_seq)),
y_lower=rep(0,length(tau_0_seq)),theory_limit=pred_deviance_seq_each_tau_0)
# add empirical point
m=20/delta
load(paste0("empirical_predresult_matrix_non_infor_syn_data_delta_",
delta,"_m_",m,"_kappa1_",
kappa1,"_design_type_",
design_type,"_beta_true_gen_",beta_true_gen,".RData"))
plot_data_set$y_mean=-empirical_result_matrix[,1]
plot_data_set$delta=delta
dataset2=plot_data_set
merged_data=rbind(dataset1,dataset2)
figg=ggplot(merged_data, aes(x = x, group = delta)) +
geom_line(aes(y = theory_limit, color = as.factor(delta))) +
#geom_ribbon(aes(ymin = y_lower, ymax = y_upper, fill = as.factor(delta)), alpha = 0.2, color = NA) +
geom_point(aes(y = y_mean, color = as.factor(delta),shape= as.factor(delta)), size = 2) +
scale_color_manual(values = c("red", "blue"),
labels = c(expression(delta==2), expression(delta==4))) +
scale_shape_manual(values = c(1,2),  # Assign specific shapes for each delta
labels = c(expression(delta == 2), expression(delta == 4))) +
labs(x = expression(tau[0]), y = "Predictive Deviance", color = "" ) +
ylim(0.5, 1) +
theme(panel.background = element_blank(),  # Blank background
panel.grid.major = element_blank(),  # Remove major grid lines
panel.grid.minor = element_blank(),  # Remove minor grid lines
panel.border = element_rect(colour = "black", fill = NA) # Add the frame
,legend.position="none",plot.title = element_text(hjust = 0.5))+ggtitle(bquote(kappa[1] == .(kappa1)))
only_for_legend_plot=ggplot(merged_data, aes(x = x, group = delta)) +
geom_line(aes(y = theory_limit, color = as.factor(delta))) +
#geom_ribbon(aes(ymin = y_lower, ymax = y_upper, fill = as.factor(delta)), alpha = 0.2, color = NA) +
geom_point(aes(y = y_mean, color = as.factor(delta),shape= as.factor(delta)), size = 2) +
scale_color_manual(values = c("red", "blue"),
labels = c(expression(delta==2), expression(delta==4))) +
scale_shape_manual(values = c(1,2),  # Assign specific shapes for each delta
labels = c(expression(delta == 2), expression(delta == 4))) +
labs(x = expression(tau[0]), y = "Cosine Similarity", color =  " ",shape= " " ) +
theme(legend.position = "right")
g_legend <- ggplotGrob(only_for_legend_plot)
legend <- g_legend$grobs[[which(g_legend$layout$name == "guide-box-right")]]
return(list(fig=figg,legend=legend))
}
one_plot_classerror<-function(kappa1,tau_0_seq=seq(0.1,2,0.1),design_type="Gaussian",beta_true_gen="t3"){
delta=2
load(paste0("TheorySolution_non_infor_syn_data_delta_kappa1_",kappa1,"_delta_",delta,".RData"))
TheorySolution2=TheorySolution
Z_matrix<-matrix(rnorm(100000),ncol=2)
pred_deviance_seq_each_tau_0=rep(0,length(tau_0_seq))
for (tau_0_index in 1:length(tau_0_seq)){
tau_0=tau_0_seq[tau_0_index]
pred_deviance_seq_each_tau_0[tau_0_index]=mean(sigmoid(kappa1*Z_matrix[,2])*(abs(TheorySolution2[tau_0_index,1])*Z_matrix[,1]+TheorySolution2[tau_0_index,3]*kappa1*Z_matrix[,2]<0)
+(1-sigmoid(kappa1*Z_matrix[,2]))*(abs(TheorySolution2[tau_0_index,1])*Z_matrix[,1]+TheorySolution2[tau_0_index,3]*kappa1*Z_matrix[,2]>0))
}
plot_data_set=data.frame(x=tau_0_seq,y_mean=rep(0,length(tau_0_seq)),y_upper=rep(0,length(tau_0_seq)),
y_lower=rep(0,length(tau_0_seq)),theory_limit=pred_deviance_seq_each_tau_0)
# add empirical point
m=20/delta
load(paste0("empirical_predresult_matrix_non_infor_syn_data_delta_",
delta,"_m_",m,"_kappa1_",
kappa1,"_design_type_",
design_type,"_beta_true_gen_",beta_true_gen,".RData"))
plot_data_set$y_mean=empirical_result_matrix[,4]
plot_data_set$delta=delta
dataset1=plot_data_set
delta=4
load(paste0("TheorySolution_non_infor_syn_data_delta_kappa1_",kappa1,"_delta_",delta,".RData"))
TheorySolution2=TheorySolution
pred_deviance_seq_each_tau_0=rep(0,length(tau_0_seq))
for (tau_0_index in 1:length(tau_0_seq)){
tau_0=tau_0_seq[tau_0_index]
pred_deviance_seq_each_tau_0[tau_0_index]=mean(sigmoid(kappa1*Z_matrix[,2])*(abs(TheorySolution2[tau_0_index,1])*Z_matrix[,1]+TheorySolution2[tau_0_index,3]*kappa1*Z_matrix[,2]<0)
+(1-sigmoid(kappa1*Z_matrix[,2]))*(abs(TheorySolution2[tau_0_index,1])*Z_matrix[,1]+TheorySolution2[tau_0_index,3]*kappa1*Z_matrix[,2]>0))
}
plot_data_set=data.frame(x=tau_0_seq,y_mean=rep(0,length(tau_0_seq)),y_upper=rep(0,length(tau_0_seq)),
y_lower=rep(0,length(tau_0_seq)),theory_limit=pred_deviance_seq_each_tau_0)
# add empirical point
m=20/delta
load(paste0("empirical_predresult_matrix_non_infor_syn_data_delta_",
delta,"_m_",m,"_kappa1_",
kappa1,"_design_type_",
design_type,"_beta_true_gen_",beta_true_gen,".RData"))
plot_data_set$y_mean=empirical_result_matrix[,4]
plot_data_set$delta=delta
dataset2=plot_data_set
merged_data=rbind(dataset1,dataset2)
figg=ggplot(merged_data, aes(x = x, group = delta)) +
geom_line(aes(y = theory_limit, color = as.factor(delta))) +
#geom_ribbon(aes(ymin = y_lower, ymax = y_upper, fill = as.factor(delta)), alpha = 0.2, color = NA) +
geom_point(aes(y = y_mean, color = as.factor(delta),shape= as.factor(delta)), size = 2) +
scale_color_manual(values = c("red", "blue"),
labels = c(expression(delta==2), expression(delta==4))) +
scale_shape_manual(values = c(1,2),  # Assign specific shapes for each delta
labels = c(expression(delta == 2), expression(delta == 4))) +
labs(x = expression(tau[0]), y = "Generalization Error", color = "" ) +
ylim(0.3, 0.5) +
theme(panel.background = element_blank(),  # Blank background
panel.grid.major = element_blank(),  # Remove major grid lines
panel.grid.minor = element_blank(),  # Remove minor grid lines
panel.border = element_rect(colour = "black", fill = NA) # Add the frame
,legend.position="none",plot.title = element_text(hjust = 0.5))+ggtitle(bquote(kappa[1] == .(kappa1)))
only_for_legend_plot=ggplot(merged_data, aes(x = x, group = delta)) +
geom_line(aes(y = theory_limit, color = as.factor(delta))) +
#geom_ribbon(aes(ymin = y_lower, ymax = y_upper, fill = as.factor(delta)), alpha = 0.2, color = NA) +
geom_point(aes(y = y_mean, color = as.factor(delta),shape= as.factor(delta)), size = 2) +
scale_color_manual(values = c("red", "blue"),
labels = c(expression(delta==2), expression(delta==4))) +
scale_shape_manual(values = c(1,2),  # Assign specific shapes for each delta
labels = c(expression(delta == 2), expression(delta == 4))) +
labs(x = expression(tau[0]), y = "Cosine Similarity", color =  " ",shape= " " ) +
theme(legend.position = "right",legend.text = element_text(size = 18),
legend.key.size = unit(2.5, "lines"),panel.background = element_blank())
g_legend <- ggplotGrob(only_for_legend_plot)
legend <- g_legend$grobs[[which(g_legend$layout$name == "guide-box-right")]]
return(list(fig=figg,legend=legend))
}
one_plot_classerror(kappa1=1)$fig
legend=one_plot_classerror(kappa1=1)$legend
library(gridExtra)
library(glmnet)
library(sigmoid)
#### generate plot
library(ggplot2)
library(sigmoid)
tau_0_seq=seq(0.1,2,0.1)
one_plot_pred_deviance<-function(kappa1,tau_0_seq=seq(0.1,2,0.1),design_type="Gaussian",beta_true_gen="t3"){
delta=2
load(paste0("TheorySolution_non_infor_syn_data_delta_kappa1_",kappa1,"_delta_",delta,".RData"))
TheorySolution2=TheorySolution
Z_matrix<-matrix(rnorm(100000),ncol=2)
pred_deviance_seq_each_tau_0=rep(0,length(tau_0_seq))
for (tau_0_index in 1:length(tau_0_seq)){
tau_0=tau_0_seq[tau_0_index]
pred_deviance_seq_each_tau_0[tau_0_index]=-mean(sigmoid(kappa1*Z_matrix[,2])*log(sigmoid(abs(TheorySolution2[tau_0_index,1])*Z_matrix[,1]+TheorySolution2[tau_0_index,3]*kappa1*Z_matrix[,2]))
+(1-sigmoid(kappa1*Z_matrix[,2]))*log(1-sigmoid(abs(TheorySolution2[tau_0_index,1])*Z_matrix[,1]+TheorySolution2[tau_0_index,3]*kappa1*Z_matrix[,2])))
}
plot_data_set=data.frame(x=tau_0_seq,y_mean=rep(0,length(tau_0_seq)),y_upper=rep(0,length(tau_0_seq)),
y_lower=rep(0,length(tau_0_seq)),theory_limit=pred_deviance_seq_each_tau_0)
# add empirical point
m=20/delta
load(paste0("empirical_predresult_matrix_non_infor_syn_data_delta_",
delta,"_m_",m,"_kappa1_",
kappa1,"_design_type_",
design_type,"_beta_true_gen_",beta_true_gen,".RData"))
plot_data_set$y_mean=-empirical_result_matrix[,1]
plot_data_set$delta=delta
dataset1=plot_data_set
delta=4
load(paste0("TheorySolution_non_infor_syn_data_delta_kappa1_",kappa1,"_delta_",delta,".RData"))
TheorySolution2=TheorySolution
pred_deviance_seq_each_tau_0=rep(0,length(tau_0_seq))
for (tau_0_index in 1:length(tau_0_seq)){
tau_0=tau_0_seq[tau_0_index]
pred_deviance_seq_each_tau_0[tau_0_index]=-mean(sigmoid(kappa1*Z_matrix[,2])*log(sigmoid(abs(TheorySolution2[tau_0_index,1])*Z_matrix[,1]+TheorySolution2[tau_0_index,3]*kappa1*Z_matrix[,2]))
+(1-sigmoid(kappa1*Z_matrix[,2]))*log(1-sigmoid(abs(TheorySolution2[tau_0_index,1])*Z_matrix[,1]+TheorySolution2[tau_0_index,3]*kappa1*Z_matrix[,2])))
}
plot_data_set=data.frame(x=tau_0_seq,y_mean=rep(0,length(tau_0_seq)),y_upper=rep(0,length(tau_0_seq)),
y_lower=rep(0,length(tau_0_seq)),theory_limit=pred_deviance_seq_each_tau_0)
# add empirical point
m=20/delta
load(paste0("empirical_predresult_matrix_non_infor_syn_data_delta_",
delta,"_m_",m,"_kappa1_",
kappa1,"_design_type_",
design_type,"_beta_true_gen_",beta_true_gen,".RData"))
plot_data_set$y_mean=-empirical_result_matrix[,1]
plot_data_set$delta=delta
dataset2=plot_data_set
merged_data=rbind(dataset1,dataset2)
figg=ggplot(merged_data, aes(x = x, group = delta)) +
geom_line(aes(y = theory_limit, color = as.factor(delta))) +
#geom_ribbon(aes(ymin = y_lower, ymax = y_upper, fill = as.factor(delta)), alpha = 0.2, color = NA) +
geom_point(aes(y = y_mean, color = as.factor(delta),shape= as.factor(delta)), size = 2) +
scale_color_manual(values = c("red", "blue"),
labels = c(expression(delta==2), expression(delta==4))) +
scale_shape_manual(values = c(1,2),  # Assign specific shapes for each delta
labels = c(expression(delta == 2), expression(delta == 4))) +
labs(x = expression(tau[0]), y = "Predictive Deviance", color = "" ) +
ylim(0.5, 1) +
theme(panel.background = element_blank(),  # Blank background
panel.grid.major = element_blank(),  # Remove major grid lines
panel.grid.minor = element_blank(),  # Remove minor grid lines
panel.border = element_rect(colour = "black", fill = NA) # Add the frame
,legend.position="none",plot.title = element_text(hjust = 0.5))+ggtitle(bquote(kappa[1] == .(kappa1)))
only_for_legend_plot=ggplot(merged_data, aes(x = x, group = delta)) +
geom_line(aes(y = theory_limit, color = as.factor(delta))) +
#geom_ribbon(aes(ymin = y_lower, ymax = y_upper, fill = as.factor(delta)), alpha = 0.2, color = NA) +
geom_point(aes(y = y_mean, color = as.factor(delta),shape= as.factor(delta)), size = 2) +
scale_color_manual(values = c("red", "blue"),
labels = c(expression(delta==2), expression(delta==4))) +
scale_shape_manual(values = c(1,2),  # Assign specific shapes for each delta
labels = c(expression(delta == 2), expression(delta == 4))) +
labs(x = expression(tau[0]), y = "Cosine Similarity", color =  " ",shape= " " ) +
theme(legend.position = "right")
g_legend <- ggplotGrob(only_for_legend_plot)
legend <- g_legend$grobs[[which(g_legend$layout$name == "guide-box")]]
return(list(fig=figg,legend=legend))
}
one_plot_classerror<-function(kappa1,tau_0_seq=seq(0.1,2,0.1),design_type="Gaussian",beta_true_gen="t3"){
delta=2
load(paste0("TheorySolution_non_infor_syn_data_delta_kappa1_",kappa1,"_delta_",delta,".RData"))
TheorySolution2=TheorySolution
Z_matrix<-matrix(rnorm(100000),ncol=2)
pred_deviance_seq_each_tau_0=rep(0,length(tau_0_seq))
for (tau_0_index in 1:length(tau_0_seq)){
tau_0=tau_0_seq[tau_0_index]
pred_deviance_seq_each_tau_0[tau_0_index]=mean(sigmoid(kappa1*Z_matrix[,2])*(abs(TheorySolution2[tau_0_index,1])*Z_matrix[,1]+TheorySolution2[tau_0_index,3]*kappa1*Z_matrix[,2]<0)
+(1-sigmoid(kappa1*Z_matrix[,2]))*(abs(TheorySolution2[tau_0_index,1])*Z_matrix[,1]+TheorySolution2[tau_0_index,3]*kappa1*Z_matrix[,2]>0))
}
plot_data_set=data.frame(x=tau_0_seq,y_mean=rep(0,length(tau_0_seq)),y_upper=rep(0,length(tau_0_seq)),
y_lower=rep(0,length(tau_0_seq)),theory_limit=pred_deviance_seq_each_tau_0)
# add empirical point
m=20/delta
load(paste0("empirical_predresult_matrix_non_infor_syn_data_delta_",
delta,"_m_",m,"_kappa1_",
kappa1,"_design_type_",
design_type,"_beta_true_gen_",beta_true_gen,".RData"))
plot_data_set$y_mean=empirical_result_matrix[,4]
plot_data_set$delta=delta
dataset1=plot_data_set
delta=4
load(paste0("TheorySolution_non_infor_syn_data_delta_kappa1_",kappa1,"_delta_",delta,".RData"))
TheorySolution2=TheorySolution
pred_deviance_seq_each_tau_0=rep(0,length(tau_0_seq))
for (tau_0_index in 1:length(tau_0_seq)){
tau_0=tau_0_seq[tau_0_index]
pred_deviance_seq_each_tau_0[tau_0_index]=mean(sigmoid(kappa1*Z_matrix[,2])*(abs(TheorySolution2[tau_0_index,1])*Z_matrix[,1]+TheorySolution2[tau_0_index,3]*kappa1*Z_matrix[,2]<0)
+(1-sigmoid(kappa1*Z_matrix[,2]))*(abs(TheorySolution2[tau_0_index,1])*Z_matrix[,1]+TheorySolution2[tau_0_index,3]*kappa1*Z_matrix[,2]>0))
}
plot_data_set=data.frame(x=tau_0_seq,y_mean=rep(0,length(tau_0_seq)),y_upper=rep(0,length(tau_0_seq)),
y_lower=rep(0,length(tau_0_seq)),theory_limit=pred_deviance_seq_each_tau_0)
# add empirical point
m=20/delta
load(paste0("empirical_predresult_matrix_non_infor_syn_data_delta_",
delta,"_m_",m,"_kappa1_",
kappa1,"_design_type_",
design_type,"_beta_true_gen_",beta_true_gen,".RData"))
plot_data_set$y_mean=empirical_result_matrix[,4]
plot_data_set$delta=delta
dataset2=plot_data_set
merged_data=rbind(dataset1,dataset2)
figg=ggplot(merged_data, aes(x = x, group = delta)) +
geom_line(aes(y = theory_limit, color = as.factor(delta))) +
#geom_ribbon(aes(ymin = y_lower, ymax = y_upper, fill = as.factor(delta)), alpha = 0.2, color = NA) +
geom_point(aes(y = y_mean, color = as.factor(delta),shape= as.factor(delta)), size = 2) +
scale_color_manual(values = c("red", "blue"),
labels = c(expression(delta==2), expression(delta==4))) +
scale_shape_manual(values = c(1,2),  # Assign specific shapes for each delta
labels = c(expression(delta == 2), expression(delta == 4))) +
labs(x = expression(tau[0]), y = "Generalization Error", color = "" ) +
ylim(0.3, 0.5) +
theme(panel.background = element_blank(),  # Blank background
panel.grid.major = element_blank(),  # Remove major grid lines
panel.grid.minor = element_blank(),  # Remove minor grid lines
panel.border = element_rect(colour = "black", fill = NA) # Add the frame
,legend.position="none",plot.title = element_text(hjust = 0.5))+ggtitle(bquote(kappa[1] == .(kappa1)))
only_for_legend_plot=ggplot(merged_data, aes(x = x, group = delta)) +
geom_line(aes(y = theory_limit, color = as.factor(delta))) +
#geom_ribbon(aes(ymin = y_lower, ymax = y_upper, fill = as.factor(delta)), alpha = 0.2, color = NA) +
geom_point(aes(y = y_mean, color = as.factor(delta),shape= as.factor(delta)), size = 2) +
scale_color_manual(values = c("red", "blue"),
labels = c(expression(delta==2), expression(delta==4))) +
scale_shape_manual(values = c(1,2),  # Assign specific shapes for each delta
labels = c(expression(delta == 2), expression(delta == 4))) +
labs(x = expression(tau[0]), y = "Cosine Similarity", color =  " ",shape= " " ) +
theme(legend.position = "right",legend.text = element_text(size = 18),
legend.key.size = unit(2.5, "lines"),panel.background = element_blank())
g_legend <- ggplotGrob(only_for_legend_plot)
legend <- g_legend$grobs[[which(g_legend$layout$name == "guide-box")]]
return(list(fig=figg,legend=legend))
}
one_plot_classerror(kappa1=1)$fig
legend=one_plot_classerror(kappa1=1)$legend
devianceplot=one_plot_pred_deviance( kappa1 = 2)$fig
classplot=one_plot_classerror(kappa1=1.5)$fig
devianceplot=one_plot_pred_deviance( kappa1 = 1.5)$fig
classplot
devianceplot
setwd("~/Library/CloudStorage/OneDrive-NationalUniversityofSingapore/CGMT_cat/numerical_study/case_non_infor_syn_data/em_plot_remake")
generate_one_plot<-function(type_of_plot="MSE",kappa1=1){
tau_0_seq=seq(0.1,2,0.1)
design_type="Gaussian"
beta_true_gen="t3"
delta=4
m=20/delta
load(paste0("TheorySolution_non_infor_syn_data_delta_kappa1_",kappa1,"_delta_",delta,".RData"))
load(paste0("empirical_result_matrix_non_infor_syn_data_delta_",
delta,"_m_",m,"_kappa1_",
kappa1,"_design_type_",
design_type,"_beta_true_gen_",beta_true_gen,".RData"))
plot_data_set=data.frame(x=tau_0_seq,y_mean=rep(0,length(tau_0_seq)),y_upper=rep(0,length(tau_0_seq)),
y_lower=rep(0,length(tau_0_seq)),theory_limit=rep(0,length(tau_0_seq)))
empir_index=1:3
if(type_of_plot=="MSE"){
empir_index=1:3
plot_data_set$theory_limit=TheorySolution[,1]^2+kappa1^2*(TheorySolution[,3]-1)^2
}else{
empir_index=4:6
plot_data_set$theory_limit=kappa1^2*TheorySolution[,3]/(kappa1*sqrt(kappa1^2*TheorySolution[,3]^2+TheorySolution[,1]^2))
}
plot_data_set[,c(2,3,4)]=empirical_result_matrix[,empir_index]
plot_data_set$delta=delta
dataset1=plot_data_set
delta=2
m=20/delta
load(paste0("TheorySolution_non_infor_syn_data_delta_kappa1_",kappa1,"_delta_",delta,".RData"))
load(paste0("empirical_result_matrix_non_infor_syn_data_delta_",
delta,"_m_",m,"_kappa1_",
kappa1,"_design_type_",
design_type,"_beta_true_gen_",beta_true_gen,".RData"))
plot_data_set=data.frame(x=tau_0_seq,y_mean=rep(0,length(tau_0_seq)),y_upper=rep(0,length(tau_0_seq)),
y_lower=rep(0,length(tau_0_seq)),theory_limit=rep(0,length(tau_0_seq)))
empir_index=1:3
if(type_of_plot=="MSE"){
empir_index=1:3
plot_data_set$theory_limit=TheorySolution[,1]^2+kappa1^2*(TheorySolution[,3]-1)^2
}else{
empir_index=4:6
plot_data_set$theory_limit=kappa1^2*TheorySolution[,3]/(kappa1*sqrt(kappa1^2*TheorySolution[,3]^2+TheorySolution[,1]^2))
}
plot_data_set[,c(2,3,4)]=empirical_result_matrix[,empir_index]
plot_data_set$delta=delta
dataset2=plot_data_set
merged_data=rbind(dataset1,dataset2)
if(type_of_plot=="MSE"){
figg=ggplot(merged_data, aes(x = x, group = delta)) +
geom_line(aes(y = theory_limit, color = as.factor(delta))) +
#geom_ribbon(aes(ymin = y_lower, ymax = y_upper, fill = as.factor(delta)), alpha = 0.2, color = NA) +
geom_point(aes(y = y_mean, color = as.factor(delta),shape= as.factor(delta)), size = 2) +
scale_color_manual(values = c("red", "blue"),
labels = c(expression(delta==2), expression(delta==4))) +
scale_shape_manual(values = c(1,2),  # Assign specific shapes for each delta
labels = c(expression(delta == 2), expression(delta == 4))) +
labs(x = expression(tau[0]), y = "Square Error", color = "" ) +
ylim(0, 4.2) +
theme(panel.background = element_blank(),  # Blank background
panel.grid.major = element_blank(),  # Remove major grid lines
panel.grid.minor = element_blank(),  # Remove minor grid lines
panel.border = element_rect(colour = "black", fill = NA) # Add the frame
,legend.position="none",plot.title = element_text(hjust = 0.5))+ggtitle(bquote(kappa[1] == .(kappa1)))
}else{
figg=ggplot(merged_data, aes(x = x, group = delta)) +
geom_line(aes(y = theory_limit, color = as.factor(delta))) +
#geom_ribbon(aes(ymin = y_lower, ymax = y_upper, fill = as.factor(delta)), alpha = 0.2, color = NA) +
geom_point(aes(y = y_mean, color = as.factor(delta),shape= as.factor(delta)), size = 2) +
scale_color_manual(values = c("red", "blue"),
labels = c(expression(delta==2), expression(delta==4))) +
scale_shape_manual(values = c(1,2),  # Assign specific shapes for each delta
labels = c(expression(delta == 2), expression(delta == 4))) +
labs(x = expression(tau[0]), y = "Cosine Similarity", color = "" ) +
ylim(0, 1) +
theme(panel.background = element_blank(),  # Blank background
panel.grid.major = element_blank(),  # Remove major grid lines
panel.grid.minor = element_blank(),  # Remove minor grid lines
panel.border = element_rect(colour = "black", fill = NA ) # Add the frame
, legend.position = "none",plot.title = element_text(hjust = 0.5))+ggtitle(bquote(kappa[1] == .(kappa1)))
}
only_for_legend_plot=ggplot(merged_data, aes(x = x, group = delta)) +
geom_line(aes(y = theory_limit, color = as.factor(delta))) +
#geom_ribbon(aes(ymin = y_lower, ymax = y_upper, fill = as.factor(delta)), alpha = 0.2, color = NA) +
geom_point(aes(y = y_mean, color = as.factor(delta),shape= as.factor(delta)), size = 2) +
scale_color_manual(values = c("red", "blue"),
labels = c(expression(delta==2), expression(delta==4))) +
scale_shape_manual(values = c(1,2),  # Assign specific shapes for each delta
labels = c(expression(delta == 2), expression(delta == 4))) +
labs(x = expression(tau[0]), y = "Cosine Similarity", color =  " ",shape= " " ) +
theme(legend.position = "right",legend.text = element_text(size = 18),
legend.key.size = unit(2.5, "lines"),panel.background = element_blank())
# ylim(0, 10) +
# theme(panel.background = element_blank(),  # Blank background
#       panel.grid.major = element_blank(),  # Remove major grid lines
#       panel.grid.minor = element_blank(),  # Remove minor grid lines
#       panel.border = element_rect(colour = "black", fill = NA ) # Add the frame
#       ,legend.position = "right")
g_legend <- ggplotGrob(only_for_legend_plot)
legend <- g_legend$grobs[[which(g_legend$layout$name == "guide-box")]]
return(list(fig=figg,legend=legend))
}
generate_one_plot("MSE",kappa1 = 1.5)$fig
squareerrplot=generate_one_plot("MSE",kappa1 = 1.5)$fig
cosineplot=generate_one_plot("Cor",kappa1 = 1.5)$fig
library(gridExtra)
library(gridExtra)
grid.arrange( squareerrplot, cosineplot, classplot, devianceplot, ncol=4)
grid.arrange( squareerrplot, cosineplot, classplot, devianceplot, ncol=4)
